
BNO055.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800200  000029b0  00002a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000183  008002c6  008002c6  00002b0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011279  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034b1  00000000  00000000  00014435  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039a6  00000000  00000000  000178e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001418  00000000  00000000  0001b28c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005b21  00000000  00000000  0001c6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006736  00000000  00000000  000221c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  000288fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1b c1       	rjmp	.+566    	; 0x238 <__ctors_end>
       2:	00 00       	nop
       4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
       a:	00 00       	nop
       c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
       e:	00 00       	nop
      10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
      12:	00 00       	nop
      14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c1       	rjmp	.+630    	; 0x298 <__bad_interrupt>
      22:	00 00       	nop
      24:	39 c1       	rjmp	.+626    	; 0x298 <__bad_interrupt>
      26:	00 00       	nop
      28:	37 c1       	rjmp	.+622    	; 0x298 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	35 c1       	rjmp	.+618    	; 0x298 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c1       	rjmp	.+614    	; 0x298 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c1       	rjmp	.+610    	; 0x298 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c1       	rjmp	.+606    	; 0x298 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2d c1       	rjmp	.+602    	; 0x298 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2b c1       	rjmp	.+598    	; 0x298 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c1       	rjmp	.+594    	; 0x298 <__bad_interrupt>
      46:	00 00       	nop
      48:	27 c1       	rjmp	.+590    	; 0x298 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c1       	rjmp	.+586    	; 0x298 <__bad_interrupt>
      4e:	00 00       	nop
      50:	23 c1       	rjmp	.+582    	; 0x298 <__bad_interrupt>
      52:	00 00       	nop
      54:	21 c1       	rjmp	.+578    	; 0x298 <__bad_interrupt>
      56:	00 00       	nop
      58:	1f c1       	rjmp	.+574    	; 0x298 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c6       	rjmp	.+3174   	; 0xcc4 <__vector_23>
      5e:	00 00       	nop
      60:	1b c1       	rjmp	.+566    	; 0x298 <__bad_interrupt>
      62:	00 00       	nop
      64:	bc c3       	rjmp	.+1912   	; 0x7de <__vector_25>
      66:	00 00       	nop
      68:	f0 c3       	rjmp	.+2016   	; 0x84a <__vector_26>
      6a:	00 00       	nop
      6c:	15 c1       	rjmp	.+554    	; 0x298 <__bad_interrupt>
      6e:	00 00       	nop
      70:	13 c1       	rjmp	.+550    	; 0x298 <__bad_interrupt>
      72:	00 00       	nop
      74:	11 c1       	rjmp	.+546    	; 0x298 <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0d c1       	rjmp	.+538    	; 0x298 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0b c1       	rjmp	.+534    	; 0x298 <__bad_interrupt>
      82:	00 00       	nop
      84:	09 c1       	rjmp	.+530    	; 0x298 <__bad_interrupt>
      86:	00 00       	nop
      88:	07 c1       	rjmp	.+526    	; 0x298 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 c1       	rjmp	.+522    	; 0x298 <__bad_interrupt>
      8e:	00 00       	nop
      90:	03 c1       	rjmp	.+518    	; 0x298 <__bad_interrupt>
      92:	00 00       	nop
      94:	01 c1       	rjmp	.+514    	; 0x298 <__bad_interrupt>
      96:	00 00       	nop
      98:	ff c0       	rjmp	.+510    	; 0x298 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__vector_39>
      a0:	fb c0       	rjmp	.+502    	; 0x298 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f9 c0       	rjmp	.+498    	; 0x298 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f7 c0       	rjmp	.+494    	; 0x298 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f5 c0       	rjmp	.+490    	; 0x298 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f3 c0       	rjmp	.+486    	; 0x298 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f1 c0       	rjmp	.+482    	; 0x298 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ef c0       	rjmp	.+478    	; 0x298 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ed c0       	rjmp	.+474    	; 0x298 <__bad_interrupt>
      be:	00 00       	nop
      c0:	eb c0       	rjmp	.+470    	; 0x298 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e9 c0       	rjmp	.+466    	; 0x298 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e7 c0       	rjmp	.+462    	; 0x298 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e5 c0       	rjmp	.+458    	; 0x298 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e3 c0       	rjmp	.+454    	; 0x298 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e1 c0       	rjmp	.+450    	; 0x298 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	df c0       	rjmp	.+446    	; 0x298 <__bad_interrupt>
      da:	00 00       	nop
      dc:	dd c0       	rjmp	.+442    	; 0x298 <__bad_interrupt>
      de:	00 00       	nop
      e0:	db c0       	rjmp	.+438    	; 0x298 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9f 07       	cpc	r25, r31
      e6:	a4 07       	cpc	r26, r20
      e8:	a9 07       	cpc	r26, r25
      ea:	b3 07       	cpc	r27, r19
      ec:	bd 07       	cpc	r27, r29
      ee:	36 08       	sbc	r3, r6
      f0:	c7 07       	cpc	r28, r23
      f2:	cf 07       	cpc	r28, r31
      f4:	d7 07       	cpc	r29, r23
      f6:	e1 07       	cpc	r30, r17
      f8:	eb 07       	cpc	r30, r27
      fa:	f5 07       	cpc	r31, r21
      fc:	04 08       	sbc	r0, r4
      fe:	0e 08       	sbc	r0, r14
     100:	36 08       	sbc	r3, r6
     102:	18 08       	sbc	r1, r8
     104:	22 08       	sbc	r2, r2
     106:	2c 08       	sbc	r2, r12
     108:	5a 08       	sbc	r5, r10
     10a:	5d 08       	sbc	r5, r13
     10c:	4c 08       	sbc	r4, r12
     10e:	50 08       	sbc	r5, r0
     110:	56 08       	sbc	r5, r6
     112:	94 08       	sbc	r9, r4
     114:	61 08       	sbc	r6, r1
     116:	65 08       	sbc	r6, r5
     118:	6b 08       	sbc	r6, r11
     11a:	6f 08       	sbc	r6, r15
     11c:	73 08       	sbc	r7, r3
     11e:	79 08       	sbc	r7, r9
     120:	7d 08       	sbc	r7, r13
     122:	81 08       	sbc	r8, r1
     124:	94 08       	sbc	r9, r4
     126:	87 08       	sbc	r8, r7
     128:	8b 08       	sbc	r8, r11
     12a:	8f 08       	sbc	r8, r15

0000012c <__trampolines_end>:
     12c:	00 00       	nop
     12e:	0a 0b       	sbc	r16, r26
     130:	02 09       	sbc	r16, r2
     132:	0c 0d       	add	r16, r12
     134:	0e 08       	sbc	r0, r14
     136:	07 03       	mulsu	r16, r23
     138:	04 01       	movw	r0, r8
	...
     156:	00 00       	nop
     158:	12 11       	cpse	r17, r2
     15a:	10 00       	.word	0x0010	; ????
	...

00000172 <digital_pin_to_bit_mask_PGM>:
     172:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     182:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     192:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a2:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b2:	04 08 10 20 40 80                                   ... @.

000001b8 <digital_pin_to_port_PGM>:
     1b8:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1c8:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1d8:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1e8:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1f8:	0b 0b 0b 0b 0b 0b                                   ......

000001fe <port_to_output_PGM>:
     1fe:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     20e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000218 <port_to_mode_PGM>:
     218:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     228:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000232 <__ctors_start>:
     232:	16 02       	muls	r17, r22
     234:	57 04       	cpc	r5, r7
     236:	fd 0d       	add	r31, r13

00000238 <__ctors_end>:
     238:	11 24       	eor	r1, r1
     23a:	1f be       	out	0x3f, r1	; 63
     23c:	cf ef       	ldi	r28, 0xFF	; 255
     23e:	d1 e2       	ldi	r29, 0x21	; 33
     240:	de bf       	out	0x3e, r29	; 62
     242:	cd bf       	out	0x3d, r28	; 61
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0c bf       	out	0x3c, r16	; 60

00000248 <__do_copy_data>:
     248:	12 e0       	ldi	r17, 0x02	; 2
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b2 e0       	ldi	r27, 0x02	; 2
     24e:	e0 eb       	ldi	r30, 0xB0	; 176
     250:	f9 e2       	ldi	r31, 0x29	; 41
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a6 3c       	cpi	r26, 0xC6	; 198
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>

00000262 <__do_clear_bss>:
     262:	24 e0       	ldi	r18, 0x04	; 4
     264:	a6 ec       	ldi	r26, 0xC6	; 198
     266:	b2 e0       	ldi	r27, 0x02	; 2
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	a9 34       	cpi	r26, 0x49	; 73
     26e:	b2 07       	cpc	r27, r18
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>

00000272 <__do_global_ctors>:
     272:	11 e0       	ldi	r17, 0x01	; 1
     274:	cc e1       	ldi	r28, 0x1C	; 28
     276:	d1 e0       	ldi	r29, 0x01	; 1
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	06 c0       	rjmp	.+12     	; 0x288 <__do_global_ctors+0x16>
     27c:	21 97       	sbiw	r28, 0x01	; 1
     27e:	01 09       	sbc	r16, r1
     280:	80 2f       	mov	r24, r16
     282:	fe 01       	movw	r30, r28
     284:	0e 94 9e 13 	call	0x273c	; 0x273c <__tablejump2__>
     288:	c9 31       	cpi	r28, 0x19	; 25
     28a:	d1 07       	cpc	r29, r17
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 07       	cpc	r16, r24
     290:	a9 f7       	brne	.-22     	; 0x27c <__do_global_ctors+0xa>
     292:	3b d3       	rcall	.+1654   	; 0x90a <main>
     294:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <_exit>

00000298 <__bad_interrupt>:
     298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
     29a:	08 95       	ret

0000029c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     29c:	26 e0       	ldi	r18, 0x06	; 6
     29e:	40 e8       	ldi	r20, 0x80	; 128
     2a0:	55 e2       	ldi	r21, 0x25	; 37
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	85 ed       	ldi	r24, 0xD5	; 213
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	31 d2       	rcall	.+1122   	; 0x70e <_ZN14HardwareSerial5beginEmh>
Adafruit_BNO055 bno = Adafruit_BNO055(55);

void setup(void) 
{
  Serial.begin(9600);
  Serial.println("Orientation Sensor Test"); Serial.println("");
     2ac:	68 e0       	ldi	r22, 0x08	; 8
     2ae:	72 e0       	ldi	r23, 0x02	; 2
     2b0:	85 ed       	ldi	r24, 0xD5	; 213
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	7e d3       	rcall	.+1788   	; 0x9b2 <_ZN5Print7printlnEPKc>
     2b6:	61 e9       	ldi	r22, 0x91	; 145
     2b8:	72 e0       	ldi	r23, 0x02	; 2
     2ba:	85 ed       	ldi	r24, 0xD5	; 213
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	79 d3       	rcall	.+1778   	; 0x9b2 <_ZN5Print7printlnEPKc>
  
  pinMode(ledPin, OUTPUT); // sets the pin as output
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ledPin>
     2c6:	31 d7       	rcall	.+3682   	; 0x112a <pinMode>
  
  /* Initialise the sensor */
  if(!bno.begin())
     2c8:	6c e0       	ldi	r22, 0x0C	; 12
     2ca:	86 ec       	ldi	r24, 0xC6	; 198
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t>
     2d2:	81 11       	cpse	r24, r1
     2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <setup+0x46>
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
     2d6:	60 e2       	ldi	r22, 0x20	; 32
     2d8:	72 e0       	ldi	r23, 0x02	; 2
     2da:	85 ed       	ldi	r24, 0xD5	; 213
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	5e d3       	rcall	.+1724   	; 0x99c <_ZN5Print5printEPKc>
     2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <setup+0x44>
    while(1);
  }
  
  delay(1000);
     2e2:	68 ee       	ldi	r22, 0xE8	; 232
     2e4:	73 e0       	ldi	r23, 0x03	; 3
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	67 d5       	rcall	.+2766   	; 0xdba <delay>
     2ec:	61 e0       	ldi	r22, 0x01	; 1
    
  bno.setExtCrystalUse(true);
     2ee:	86 ec       	ldi	r24, 0xC6	; 198
     2f0:	92 e0       	ldi	r25, 0x02	; 2
     2f2:	0c 94 97 09 	jmp	0x132e	; 0x132e <_ZN15Adafruit_BNO05516setExtCrystalUseEb>

000002f6 <_Z6pwmOutP3com>:
     2f6:	fc 01       	movw	r30, r24
  delay(100);
}

void pwmOut(struct com *data){
	
	 analogWrite(ledPin, data->x_axis);
     2f8:	60 81       	ld	r22, Z
     2fa:	71 81       	ldd	r23, Z+1	; 0x01
     2fc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ledPin>
     300:	f7 c5       	rjmp	.+3054   	; 0xef0 <analogWrite>

00000302 <loop>:
    
  bno.setExtCrystalUse(true);
}

void loop(void) 
{
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	a4 97       	sbiw	r28, 0x24	; 36
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	de bf       	out	0x3e, r29	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	cd bf       	out	0x3d, r28	; 61
  /* Get a new sensor event */ 
  sensors_event_t event; 
  bno.getEvent(&event);
     31a:	be 01       	movw	r22, r28
     31c:	6f 5f       	subi	r22, 0xFF	; 255
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	86 ec       	ldi	r24, 0xC6	; 198
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>
  
  
  
  com_reg.x_axis= (int) event.orientation.x;
     328:	0f ec       	ldi	r16, 0xCF	; 207
     32a:	12 e0       	ldi	r17, 0x02	; 2
     32c:	6d 89       	ldd	r22, Y+21	; 0x15
     32e:	7e 89       	ldd	r23, Y+22	; 0x16
     330:	8f 89       	ldd	r24, Y+23	; 0x17
     332:	98 8d       	ldd	r25, Y+24	; 0x18
     334:	8a d0       	rcall	.+276    	; 0x44a <__fixsfsi>
     336:	f8 01       	movw	r30, r16
     338:	71 83       	std	Z+1, r23	; 0x01
     33a:	60 83       	st	Z, r22
  com_reg.y_axis= (int) event.orientation.y;
     33c:	69 8d       	ldd	r22, Y+25	; 0x19
     33e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     340:	8b 8d       	ldd	r24, Y+27	; 0x1b
     342:	9c 8d       	ldd	r25, Y+28	; 0x1c
     344:	82 d0       	rcall	.+260    	; 0x44a <__fixsfsi>
     346:	f8 01       	movw	r30, r16
     348:	73 83       	std	Z+3, r23	; 0x03
     34a:	62 83       	std	Z+2, r22	; 0x02
  com_reg.z_axis= (int) event.orientation.z;
     34c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     34e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     350:	8f 8d       	ldd	r24, Y+31	; 0x1f
     352:	98 a1       	ldd	r25, Y+32	; 0x20
     354:	7a d0       	rcall	.+244    	; 0x44a <__fixsfsi>
     356:	f8 01       	movw	r30, r16
     358:	75 83       	std	Z+5, r23	; 0x05
     35a:	64 83       	std	Z+4, r22	; 0x04
  
  /* Display the floating point data */
  Serial.print("X: ");
     35c:	6d e5       	ldi	r22, 0x5D	; 93
     35e:	72 e0       	ldi	r23, 0x02	; 2
     360:	85 ed       	ldi	r24, 0xD5	; 213
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	1b d3       	rcall	.+1590   	; 0x99c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.x, 4);
     366:	4d 89       	ldd	r20, Y+21	; 0x15
     368:	5e 89       	ldd	r21, Y+22	; 0x16
     36a:	6f 89       	ldd	r22, Y+23	; 0x17
     36c:	78 8d       	ldd	r23, Y+24	; 0x18
     36e:	24 e0       	ldi	r18, 0x04	; 4
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	85 ed       	ldi	r24, 0xD5	; 213
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	a5 d4       	rcall	.+2378   	; 0xcc2 <_ZN5Print5printEdi>
  Serial.print("\tX': ");
     378:	61 e6       	ldi	r22, 0x61	; 97
     37a:	72 e0       	ldi	r23, 0x02	; 2
     37c:	85 ed       	ldi	r24, 0xD5	; 213
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0d d3       	rcall	.+1562   	; 0x99c <_ZN5Print5printEPKc>
     382:	f8 01       	movw	r30, r16
  Serial.print(com_reg.x_axis);
     384:	60 81       	ld	r22, Z
     386:	71 81       	ldd	r23, Z+1	; 0x01
     388:	4a e0       	ldi	r20, 0x0A	; 10
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	85 ed       	ldi	r24, 0xD5	; 213
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	be d3       	rcall	.+1916   	; 0xb0e <_ZN5Print5printEii>
  Serial.print("\tY: ");
     392:	67 e6       	ldi	r22, 0x67	; 103
     394:	72 e0       	ldi	r23, 0x02	; 2
     396:	85 ed       	ldi	r24, 0xD5	; 213
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	00 d3       	rcall	.+1536   	; 0x99c <_ZN5Print5printEPKc>
     39c:	49 8d       	ldd	r20, Y+25	; 0x19
  Serial.print(event.orientation.y, 4);
     39e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     3a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     3a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     3a4:	24 e0       	ldi	r18, 0x04	; 4
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	85 ed       	ldi	r24, 0xD5	; 213
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	8a d4       	rcall	.+2324   	; 0xcc2 <_ZN5Print5printEdi>
  Serial.print("\tY': ");
     3ae:	6c e6       	ldi	r22, 0x6C	; 108
     3b0:	72 e0       	ldi	r23, 0x02	; 2
     3b2:	85 ed       	ldi	r24, 0xD5	; 213
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	f2 d2       	rcall	.+1508   	; 0x99c <_ZN5Print5printEPKc>
  Serial.print(com_reg.y_axis);
     3b8:	f8 01       	movw	r30, r16
     3ba:	62 81       	ldd	r22, Z+2	; 0x02
     3bc:	73 81       	ldd	r23, Z+3	; 0x03
     3be:	4a e0       	ldi	r20, 0x0A	; 10
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	85 ed       	ldi	r24, 0xD5	; 213
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	a3 d3       	rcall	.+1862   	; 0xb0e <_ZN5Print5printEii>
  Serial.print("\tZ: ");
     3c8:	62 e7       	ldi	r22, 0x72	; 114
     3ca:	72 e0       	ldi	r23, 0x02	; 2
     3cc:	85 ed       	ldi	r24, 0xD5	; 213
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	e5 d2       	rcall	.+1482   	; 0x99c <_ZN5Print5printEPKc>
  Serial.print(event.orientation.z, 4);
     3d2:	4d 8d       	ldd	r20, Y+29	; 0x1d
     3d4:	5e 8d       	ldd	r21, Y+30	; 0x1e
     3d6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     3d8:	78 a1       	ldd	r23, Y+32	; 0x20
     3da:	24 e0       	ldi	r18, 0x04	; 4
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	85 ed       	ldi	r24, 0xD5	; 213
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	6f d4       	rcall	.+2270   	; 0xcc2 <_ZN5Print5printEdi>
  Serial.print("\tZ': ");
     3e4:	67 e7       	ldi	r22, 0x77	; 119
     3e6:	72 e0       	ldi	r23, 0x02	; 2
     3e8:	85 ed       	ldi	r24, 0xD5	; 213
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	d7 d2       	rcall	.+1454   	; 0x99c <_ZN5Print5printEPKc>
  Serial.print( com_reg.z_axis);
     3ee:	f8 01       	movw	r30, r16
     3f0:	64 81       	ldd	r22, Z+4	; 0x04
     3f2:	75 81       	ldd	r23, Z+5	; 0x05
     3f4:	4a e0       	ldi	r20, 0x0A	; 10
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	85 ed       	ldi	r24, 0xD5	; 213
     3fa:	92 e0       	ldi	r25, 0x02	; 2
  Serial.println("");
     3fc:	88 d3       	rcall	.+1808   	; 0xb0e <_ZN5Print5printEii>
     3fe:	61 e9       	ldi	r22, 0x91	; 145
     400:	72 e0       	ldi	r23, 0x02	; 2
     402:	85 ed       	ldi	r24, 0xD5	; 213
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	d5 d2       	rcall	.+1450   	; 0x9b2 <_ZN5Print7printlnEPKc>
  pwmOut(&com_reg);
     408:	c8 01       	movw	r24, r16
     40a:	75 df       	rcall	.-278    	; 0x2f6 <_Z6pwmOutP3com>
     40c:	64 e6       	ldi	r22, 0x64	; 100
  
  delay(100);
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	d2 d4       	rcall	.+2468   	; 0xdba <delay>
     416:	a4 96       	adiw	r28, 0x24	; 36
     418:	0f b6       	in	r0, 0x3f	; 63
}
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <_GLOBAL__sub_I_ledPin>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
	
com com_reg;
	
void pwmOut(struct com *data);
  
Adafruit_BNO055 bno = Adafruit_BNO055(55);
     430:	0b e7       	ldi	r16, 0x7B	; 123
     432:	13 e0       	ldi	r17, 0x03	; 3
     434:	28 e2       	ldi	r18, 0x28	; 40
     436:	47 e3       	ldi	r20, 0x37	; 55
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	86 ec       	ldi	r24, 0xC6	; 198
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	24 d7       	rcall	.+3656   	; 0x128c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
}

void pwmOut(struct com *data){
	
	 analogWrite(ledPin, data->x_axis);
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <__fixsfsi>:
     44a:	04 d0       	rcall	.+8      	; 0x454 <__fixunssfsi>
     44c:	68 94       	set
     44e:	b1 11       	cpse	r27, r1
     450:	50 c0       	rjmp	.+160    	; 0x4f2 <__fp_szero>
     452:	08 95       	ret

00000454 <__fixunssfsi>:
     454:	33 d0       	rcall	.+102    	; 0x4bc <__fp_splitA>
     456:	88 f0       	brcs	.+34     	; 0x47a <__fixunssfsi+0x26>
     458:	9f 57       	subi	r25, 0x7F	; 127
     45a:	90 f0       	brcs	.+36     	; 0x480 <__fixunssfsi+0x2c>
     45c:	b9 2f       	mov	r27, r25
     45e:	99 27       	eor	r25, r25
     460:	b7 51       	subi	r27, 0x17	; 23
     462:	a0 f0       	brcs	.+40     	; 0x48c <__fixunssfsi+0x38>
     464:	d1 f0       	breq	.+52     	; 0x49a <__fixunssfsi+0x46>
     466:	66 0f       	add	r22, r22
     468:	77 1f       	adc	r23, r23
     46a:	88 1f       	adc	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	1a f0       	brmi	.+6      	; 0x476 <__fixunssfsi+0x22>
     470:	ba 95       	dec	r27
     472:	c9 f7       	brne	.-14     	; 0x466 <__fixunssfsi+0x12>
     474:	12 c0       	rjmp	.+36     	; 0x49a <__fixunssfsi+0x46>
     476:	b1 30       	cpi	r27, 0x01	; 1
     478:	81 f0       	breq	.+32     	; 0x49a <__fixunssfsi+0x46>
     47a:	3a d0       	rcall	.+116    	; 0x4f0 <__fp_zero>
     47c:	b1 e0       	ldi	r27, 0x01	; 1
     47e:	08 95       	ret
     480:	37 c0       	rjmp	.+110    	; 0x4f0 <__fp_zero>
     482:	67 2f       	mov	r22, r23
     484:	78 2f       	mov	r23, r24
     486:	88 27       	eor	r24, r24
     488:	b8 5f       	subi	r27, 0xF8	; 248
     48a:	39 f0       	breq	.+14     	; 0x49a <__fixunssfsi+0x46>
     48c:	b9 3f       	cpi	r27, 0xF9	; 249
     48e:	cc f3       	brlt	.-14     	; 0x482 <__fixunssfsi+0x2e>
     490:	86 95       	lsr	r24
     492:	77 95       	ror	r23
     494:	67 95       	ror	r22
     496:	b3 95       	inc	r27
     498:	d9 f7       	brne	.-10     	; 0x490 <__fixunssfsi+0x3c>
     49a:	3e f4       	brtc	.+14     	; 0x4aa <__fixunssfsi+0x56>
     49c:	90 95       	com	r25
     49e:	80 95       	com	r24
     4a0:	70 95       	com	r23
     4a2:	61 95       	neg	r22
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	8f 4f       	sbci	r24, 0xFF	; 255
     4a8:	9f 4f       	sbci	r25, 0xFF	; 255
     4aa:	08 95       	ret

000004ac <__fp_split3>:
     4ac:	57 fd       	sbrc	r21, 7
     4ae:	90 58       	subi	r25, 0x80	; 128
     4b0:	44 0f       	add	r20, r20
     4b2:	55 1f       	adc	r21, r21
     4b4:	59 f0       	breq	.+22     	; 0x4cc <__fp_splitA+0x10>
     4b6:	5f 3f       	cpi	r21, 0xFF	; 255
     4b8:	71 f0       	breq	.+28     	; 0x4d6 <__fp_splitA+0x1a>
     4ba:	47 95       	ror	r20

000004bc <__fp_splitA>:
     4bc:	88 0f       	add	r24, r24
     4be:	97 fb       	bst	r25, 7
     4c0:	99 1f       	adc	r25, r25
     4c2:	61 f0       	breq	.+24     	; 0x4dc <__fp_splitA+0x20>
     4c4:	9f 3f       	cpi	r25, 0xFF	; 255
     4c6:	79 f0       	breq	.+30     	; 0x4e6 <__fp_splitA+0x2a>
     4c8:	87 95       	ror	r24
     4ca:	08 95       	ret
     4cc:	12 16       	cp	r1, r18
     4ce:	13 06       	cpc	r1, r19
     4d0:	14 06       	cpc	r1, r20
     4d2:	55 1f       	adc	r21, r21
     4d4:	f2 cf       	rjmp	.-28     	; 0x4ba <__fp_split3+0xe>
     4d6:	46 95       	lsr	r20
     4d8:	f1 df       	rcall	.-30     	; 0x4bc <__fp_splitA>
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <__fp_splitA+0x30>
     4dc:	16 16       	cp	r1, r22
     4de:	17 06       	cpc	r1, r23
     4e0:	18 06       	cpc	r1, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	f1 cf       	rjmp	.-30     	; 0x4c8 <__fp_splitA+0xc>
     4e6:	86 95       	lsr	r24
     4e8:	71 05       	cpc	r23, r1
     4ea:	61 05       	cpc	r22, r1
     4ec:	08 94       	sec
     4ee:	08 95       	ret

000004f0 <__fp_zero>:
     4f0:	e8 94       	clt

000004f2 <__fp_szero>:
     4f2:	bb 27       	eor	r27, r27
     4f4:	66 27       	eor	r22, r22
     4f6:	77 27       	eor	r23, r23
     4f8:	cb 01       	movw	r24, r22
     4fa:	97 f9       	bld	r25, 7
     4fc:	08 95       	ret

000004fe <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     4fe:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     500:	91 8d       	ldd	r25, Z+25	; 0x19
     502:	22 8d       	ldd	r18, Z+26	; 0x1a
     504:	89 2f       	mov	r24, r25
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	80 5c       	subi	r24, 0xC0	; 192
     50a:	9f 4f       	sbci	r25, 0xFF	; 255
     50c:	82 1b       	sub	r24, r18
     50e:	91 09       	sbc	r25, r1
}
     510:	8f 73       	andi	r24, 0x3F	; 63
     512:	99 27       	eor	r25, r25
     514:	08 95       	ret

00000516 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     516:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     518:	91 8d       	ldd	r25, Z+25	; 0x19
     51a:	82 8d       	ldd	r24, Z+26	; 0x1a
     51c:	98 17       	cp	r25, r24
     51e:	31 f0       	breq	.+12     	; 0x52c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     520:	82 8d       	ldd	r24, Z+26	; 0x1a
     522:	e8 0f       	add	r30, r24
     524:	f1 1d       	adc	r31, r1
     526:	85 8d       	ldd	r24, Z+29	; 0x1d
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     530:	08 95       	ret

00000532 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     532:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     534:	91 8d       	ldd	r25, Z+25	; 0x19
     536:	82 8d       	ldd	r24, Z+26	; 0x1a
     538:	98 17       	cp	r25, r24
     53a:	61 f0       	breq	.+24     	; 0x554 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     53c:	82 8d       	ldd	r24, Z+26	; 0x1a
     53e:	df 01       	movw	r26, r30
     540:	a8 0f       	add	r26, r24
     542:	b1 1d       	adc	r27, r1
     544:	5d 96       	adiw	r26, 0x1d	; 29
     546:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     548:	92 8d       	ldd	r25, Z+26	; 0x1a
     54a:	9f 5f       	subi	r25, 0xFF	; 255
     54c:	9f 73       	andi	r25, 0x3F	; 63
     54e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     558:	08 95       	ret

0000055a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     55a:	fc 01       	movw	r30, r24
     55c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     55e:	44 8d       	ldd	r20, Z+28	; 0x1c
     560:	25 2f       	mov	r18, r21
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	84 2f       	mov	r24, r20
     566:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     568:	82 1b       	sub	r24, r18
     56a:	93 0b       	sbc	r25, r19
     56c:	54 17       	cp	r21, r20
     56e:	10 f0       	brcs	.+4      	; 0x574 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     570:	cf 96       	adiw	r24, 0x3f	; 63
     572:	08 95       	ret
  return tail - head - 1;
     574:	01 97       	sbiw	r24, 0x01	; 1
}
     576:	08 95       	ret

00000578 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     578:	8e e4       	ldi	r24, 0x4E	; 78
     57a:	94 e0       	ldi	r25, 0x04	; 4
     57c:	89 2b       	or	r24, r25
     57e:	39 f0       	breq	.+14     	; 0x58e <_Z14serialEventRunv+0x16>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	19 f0       	breq	.+6      	; 0x58e <_Z14serialEventRunv+0x16>
     588:	89 d1       	rcall	.+786    	; 0x89c <_Z17Serial0_availablev>
     58a:	81 11       	cpse	r24, r1
     58c:	25 c0       	rjmp	.+74     	; 0x5d8 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	89 2b       	or	r24, r25
     594:	41 f0       	breq	.+16     	; 0x5a6 <_Z14serialEventRunv+0x2e>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	89 2b       	or	r24, r25
     59c:	21 f0       	breq	.+8      	; 0x5a6 <_Z14serialEventRunv+0x2e>
     59e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5a2:	81 11       	cpse	r24, r1
     5a4:	1c c0       	rjmp	.+56     	; 0x5de <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	89 2b       	or	r24, r25
     5ac:	41 f0       	breq	.+16     	; 0x5be <_Z14serialEventRunv+0x46>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	89 2b       	or	r24, r25
     5b4:	21 f0       	breq	.+8      	; 0x5be <_Z14serialEventRunv+0x46>
     5b6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5ba:	81 11       	cpse	r24, r1
     5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	89 2b       	or	r24, r25
     5c4:	a1 f0       	breq	.+40     	; 0x5ee <_Z14serialEventRunv+0x76>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	89 2b       	or	r24, r25
     5cc:	81 f0       	breq	.+32     	; 0x5ee <_Z14serialEventRunv+0x76>
     5ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5d2:	81 11       	cpse	r24, r1
     5d4:	0a c0       	rjmp	.+20     	; 0x5ea <_Z14serialEventRunv+0x72>
     5d6:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     5d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5dc:	d8 cf       	rjmp	.-80     	; 0x58e <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     5de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5e2:	e1 cf       	rjmp	.-62     	; 0x5a6 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     5e4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5e8:	ea cf       	rjmp	.-44     	; 0x5be <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     5ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     5ee:	08 95       	ret

000005f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     5f0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     5f2:	84 8d       	ldd	r24, Z+28	; 0x1c
     5f4:	df 01       	movw	r26, r30
     5f6:	a8 0f       	add	r26, r24
     5f8:	b1 1d       	adc	r27, r1
     5fa:	a3 5a       	subi	r26, 0xA3	; 163
     5fc:	bf 4f       	sbci	r27, 0xFF	; 255
     5fe:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     600:	84 8d       	ldd	r24, Z+28	; 0x1c
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	8f 73       	andi	r24, 0x3F	; 63
     608:	99 27       	eor	r25, r25
     60a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     60c:	a6 89       	ldd	r26, Z+22	; 0x16
     60e:	b7 89       	ldd	r27, Z+23	; 0x17
     610:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     612:	a0 89       	ldd	r26, Z+16	; 0x10
     614:	b1 89       	ldd	r27, Z+17	; 0x11
     616:	8c 91       	ld	r24, X
     618:	83 70       	andi	r24, 0x03	; 3
     61a:	80 64       	ori	r24, 0x40	; 64
     61c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     61e:	93 8d       	ldd	r25, Z+27	; 0x1b
     620:	84 8d       	ldd	r24, Z+28	; 0x1c
     622:	98 13       	cpse	r25, r24
     624:	06 c0       	rjmp	.+12     	; 0x632 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     626:	02 88       	ldd	r0, Z+18	; 0x12
     628:	f3 89       	ldd	r31, Z+19	; 0x13
     62a:	e0 2d       	mov	r30, r0
     62c:	80 81       	ld	r24, Z
     62e:	8f 7d       	andi	r24, 0xDF	; 223
     630:	80 83       	st	Z, r24
     632:	08 95       	ret

00000634 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
  _written = true;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     646:	9b 8d       	ldd	r25, Y+27	; 0x1b
     648:	8c 8d       	ldd	r24, Y+28	; 0x1c
     64a:	98 13       	cpse	r25, r24
     64c:	05 c0       	rjmp	.+10     	; 0x658 <_ZN14HardwareSerial5writeEh+0x24>
     64e:	e8 89       	ldd	r30, Y+16	; 0x10
     650:	f9 89       	ldd	r31, Y+17	; 0x11
     652:	80 81       	ld	r24, Z
     654:	85 fd       	sbrc	r24, 5
     656:	25 c0       	rjmp	.+74     	; 0x6a2 <_ZN14HardwareSerial5writeEh+0x6e>
     658:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     65a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	0f 73       	andi	r16, 0x3F	; 63
     664:	11 27       	eor	r17, r17
     666:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     668:	8c 8d       	ldd	r24, Y+28	; 0x1c
     66a:	e8 12       	cpse	r14, r24
     66c:	0b c0       	rjmp	.+22     	; 0x684 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	07 fc       	sbrc	r0, 7
     672:	fa cf       	rjmp	.-12     	; 0x668 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     674:	e8 89       	ldd	r30, Y+16	; 0x10
     676:	f9 89       	ldd	r31, Y+17	; 0x11
     678:	80 81       	ld	r24, Z
     67a:	85 ff       	sbrs	r24, 5
     67c:	f5 cf       	rjmp	.-22     	; 0x668 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     67e:	ce 01       	movw	r24, r28
     680:	b7 df       	rcall	.-146    	; 0x5f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     682:	f2 cf       	rjmp	.-28     	; 0x668 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     684:	8b 8d       	ldd	r24, Y+27	; 0x1b
     686:	fe 01       	movw	r30, r28
     688:	e8 0f       	add	r30, r24
     68a:	f1 1d       	adc	r31, r1
     68c:	e3 5a       	subi	r30, 0xA3	; 163
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     692:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     694:	f8 94       	cli
    _tx_buffer_head = i;
     696:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     698:	ea 89       	ldd	r30, Y+18	; 0x12
     69a:	fb 89       	ldd	r31, Y+19	; 0x13
     69c:	80 81       	ld	r24, Z
     69e:	80 62       	ori	r24, 0x20	; 32
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     6a2:	9f b7       	in	r25, 0x3f	; 63
     6a4:	f8 94       	cli
      *_udr = c;
     6a6:	ee 89       	ldd	r30, Y+22	; 0x16
     6a8:	ff 89       	ldd	r31, Y+23	; 0x17
     6aa:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     6ac:	e8 89       	ldd	r30, Y+16	; 0x10
     6ae:	f9 89       	ldd	r31, Y+17	; 0x11
     6b0:	80 81       	ld	r24, Z
     6b2:	83 70       	andi	r24, 0x03	; 3
     6b4:	80 64       	ori	r24, 0x40	; 64
     6b6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6b8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6d2:	88 8d       	ldd	r24, Y+24	; 0x18
     6d4:	88 23       	and	r24, r24
     6d6:	c1 f0       	breq	.+48     	; 0x708 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     6d8:	ea 89       	ldd	r30, Y+18	; 0x12
     6da:	fb 89       	ldd	r31, Y+19	; 0x13
     6dc:	80 81       	ld	r24, Z
     6de:	85 fd       	sbrc	r24, 5
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <_ZN14HardwareSerial5flushEv+0x20>
     6e2:	a8 89       	ldd	r26, Y+16	; 0x10
     6e4:	b9 89       	ldd	r27, Y+17	; 0x11
     6e6:	8c 91       	ld	r24, X
     6e8:	86 fd       	sbrc	r24, 6
     6ea:	0e c0       	rjmp	.+28     	; 0x708 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	07 fc       	sbrc	r0, 7
     6f0:	f5 cf       	rjmp	.-22     	; 0x6dc <_ZN14HardwareSerial5flushEv+0x10>
     6f2:	80 81       	ld	r24, Z
     6f4:	85 ff       	sbrs	r24, 5
     6f6:	f2 cf       	rjmp	.-28     	; 0x6dc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     6f8:	a8 89       	ldd	r26, Y+16	; 0x10
     6fa:	b9 89       	ldd	r27, Y+17	; 0x11
     6fc:	8c 91       	ld	r24, X
     6fe:	85 ff       	sbrs	r24, 5
     700:	ed cf       	rjmp	.-38     	; 0x6dc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     702:	ce 01       	movw	r24, r28
     704:	75 df       	rcall	.-278    	; 0x5f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     706:	e8 cf       	rjmp	.-48     	; 0x6d8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	ec 01       	movw	r28, r24
     71e:	6a 01       	movw	r12, r20
     720:	7b 01       	movw	r14, r22
     722:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     724:	e8 89       	ldd	r30, Y+16	; 0x10
     726:	f9 89       	ldd	r31, Y+17	; 0x11
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     72c:	41 15       	cp	r20, r1
     72e:	51 4e       	sbci	r21, 0xE1	; 225
     730:	61 05       	cpc	r22, r1
     732:	71 05       	cpc	r23, r1
     734:	b1 f0       	breq	.+44     	; 0x762 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	79 e0       	ldi	r23, 0x09	; 9
     73a:	8d e3       	ldi	r24, 0x3D	; 61
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a7 01       	movw	r20, r14
     740:	96 01       	movw	r18, r12
     742:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodsi4>
     746:	da 01       	movw	r26, r20
     748:	c9 01       	movw	r24, r18
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	a1 09       	sbc	r26, r1
     74e:	b1 09       	sbc	r27, r1
     750:	b6 95       	lsr	r27
     752:	a7 95       	ror	r26
     754:	97 95       	ror	r25
     756:	87 95       	ror	r24
     758:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     75a:	21 15       	cp	r18, r1
     75c:	80 e1       	ldi	r24, 0x10	; 16
     75e:	38 07       	cpc	r19, r24
     760:	a8 f0       	brcs	.+42     	; 0x78c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     762:	e8 89       	ldd	r30, Y+16	; 0x10
     764:	f9 89       	ldd	r31, Y+17	; 0x11
     766:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     768:	60 e8       	ldi	r22, 0x80	; 128
     76a:	74 e8       	ldi	r23, 0x84	; 132
     76c:	8e e1       	ldi	r24, 0x1E	; 30
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	a7 01       	movw	r20, r14
     772:	96 01       	movw	r18, r12
     774:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodsi4>
     778:	da 01       	movw	r26, r20
     77a:	c9 01       	movw	r24, r18
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	a1 09       	sbc	r26, r1
     780:	b1 09       	sbc	r27, r1
     782:	b6 95       	lsr	r27
     784:	a7 95       	ror	r26
     786:	97 95       	ror	r25
     788:	87 95       	ror	r24
     78a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     78c:	ec 85       	ldd	r30, Y+12	; 0x0c
     78e:	fd 85       	ldd	r31, Y+13	; 0x0d
     790:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     792:	ee 85       	ldd	r30, Y+14	; 0x0e
     794:	ff 85       	ldd	r31, Y+15	; 0x0f
     796:	20 83       	st	Z, r18

  _written = false;
     798:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     79a:	ec 89       	ldd	r30, Y+20	; 0x14
     79c:	fd 89       	ldd	r31, Y+21	; 0x15
     79e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     7a0:	ea 89       	ldd	r30, Y+18	; 0x12
     7a2:	fb 89       	ldd	r31, Y+19	; 0x13
     7a4:	80 81       	ld	r24, Z
     7a6:	80 61       	ori	r24, 0x10	; 16
     7a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     7aa:	ea 89       	ldd	r30, Y+18	; 0x12
     7ac:	fb 89       	ldd	r31, Y+19	; 0x13
     7ae:	80 81       	ld	r24, Z
     7b0:	88 60       	ori	r24, 0x08	; 8
     7b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     7b4:	ea 89       	ldd	r30, Y+18	; 0x12
     7b6:	fb 89       	ldd	r31, Y+19	; 0x13
     7b8:	80 81       	ld	r24, Z
     7ba:	80 68       	ori	r24, 0x80	; 128
     7bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     7be:	ea 89       	ldd	r30, Y+18	; 0x12
     7c0:	fb 89       	ldd	r31, Y+19	; 0x13
     7c2:	80 81       	ld	r24, Z
     7c4:	8f 7d       	andi	r24, 0xDF	; 223
     7c6:	80 83       	st	Z, r24
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	08 95       	ret

000007d8 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	08 95       	ret

000007de <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	0b b6       	in	r0, 0x3b	; 59
     7ea:	0f 92       	push	r0
     7ec:	2f 93       	push	r18
     7ee:	8f 93       	push	r24
     7f0:	9f 93       	push	r25
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     7f6:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <Serial+0x10>
     7fa:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <Serial+0x11>
     7fe:	80 81       	ld	r24, Z
     800:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <Serial+0x16>
     804:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <Serial+0x17>
     808:	82 fd       	sbrc	r24, 2
     80a:	12 c0       	rjmp	.+36     	; 0x830 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     80c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     80e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <Serial+0x19>
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     816:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <Serial+0x1a>
     81a:	82 17       	cp	r24, r18
     81c:	51 f0       	breq	.+20     	; 0x832 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     81e:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <Serial+0x19>
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	eb 52       	subi	r30, 0x2B	; 43
     826:	fd 4f       	sbci	r31, 0xFD	; 253
     828:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     82a:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <Serial+0x19>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     830:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	2f 91       	pop	r18
     83c:	0f 90       	pop	r0
     83e:	0b be       	out	0x3b, r0	; 59
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti

0000084a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	0b b6       	in	r0, 0x3b	; 59
     856:	0f 92       	push	r0
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     870:	85 ed       	ldi	r24, 0xD5	; 213
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	bd de       	rcall	.-646    	; 0x5f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0b be       	out	0x3b, r0	; 59
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     89c:	85 ed       	ldi	r24, 0xD5	; 213
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	2e de       	rcall	.-932    	; 0x4fe <_ZN14HardwareSerial9availableEv>
     8a2:	21 e0       	ldi	r18, 0x01	; 1
     8a4:	89 2b       	or	r24, r25
     8a6:	09 f4       	brne	.+2      	; 0x8aa <_Z17Serial0_availablev+0xe>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
}
     8aa:	82 2f       	mov	r24, r18
     8ac:	08 95       	ret

000008ae <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     8ae:	e5 ed       	ldi	r30, 0xD5	; 213
     8b0:	f2 e0       	ldi	r31, 0x02	; 2
     8b2:	13 82       	std	Z+3, r1	; 0x03
     8b4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     8b6:	88 ee       	ldi	r24, 0xE8	; 232
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	a0 e0       	ldi	r26, 0x00	; 0
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	84 83       	std	Z+4, r24	; 0x04
     8c0:	95 83       	std	Z+5, r25	; 0x05
     8c2:	a6 83       	std	Z+6, r26	; 0x06
     8c4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     8c6:	81 e8       	ldi	r24, 0x81	; 129
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	80 83       	st	Z, r24
     8ce:	85 ec       	ldi	r24, 0xC5	; 197
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	95 87       	std	Z+13, r25	; 0x0d
     8d4:	84 87       	std	Z+12, r24	; 0x0c
     8d6:	84 ec       	ldi	r24, 0xC4	; 196
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	97 87       	std	Z+15, r25	; 0x0f
     8dc:	86 87       	std	Z+14, r24	; 0x0e
     8de:	80 ec       	ldi	r24, 0xC0	; 192
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	91 8b       	std	Z+17, r25	; 0x11
     8e4:	80 8b       	std	Z+16, r24	; 0x10
     8e6:	81 ec       	ldi	r24, 0xC1	; 193
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	93 8b       	std	Z+19, r25	; 0x13
     8ec:	82 8b       	std	Z+18, r24	; 0x12
     8ee:	82 ec       	ldi	r24, 0xC2	; 194
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	95 8b       	std	Z+21, r25	; 0x15
     8f4:	84 8b       	std	Z+20, r24	; 0x14
     8f6:	86 ec       	ldi	r24, 0xC6	; 198
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	97 8b       	std	Z+23, r25	; 0x17
     8fc:	86 8b       	std	Z+22, r24	; 0x16
     8fe:	11 8e       	std	Z+25, r1	; 0x19
     900:	12 8e       	std	Z+26, r1	; 0x1a
     902:	13 8e       	std	Z+27, r1	; 0x1b
     904:	14 8e       	std	Z+28, r1	; 0x1c
     906:	08 95       	ret

00000908 <initVariant>:
     908:	08 95       	ret

0000090a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     90a:	90 d2       	rcall	.+1312   	; 0xe2c <init>

	initVariant();
     90c:	fd df       	rcall	.-6      	; 0x908 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     90e:	c6 dc       	rcall	.-1652   	; 0x29c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     910:	cc eb       	ldi	r28, 0xBC	; 188
     912:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     914:	f6 dc       	rcall	.-1556   	; 0x302 <loop>
		if (serialEventRun) serialEventRun();
     916:	20 97       	sbiw	r28, 0x00	; 0
     918:	e9 f3       	breq	.-6      	; 0x914 <main+0xa>
     91a:	2e de       	rcall	.-932    	; 0x578 <_Z14serialEventRunv>
     91c:	fb cf       	rjmp	.-10     	; 0x914 <main+0xa>

0000091e <_ZN5Print5writeEPKhj>:
     91e:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	6c 01       	movw	r12, r24
     930:	7a 01       	movw	r14, r20
     932:	8b 01       	movw	r16, r22
     934:	c0 e0       	ldi	r28, 0x00	; 0
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	ce 15       	cp	r28, r14
     93a:	df 05       	cpc	r29, r15
     93c:	81 f0       	breq	.+32     	; 0x95e <_ZN5Print5writeEPKhj+0x40>
     93e:	d8 01       	movw	r26, r16
     940:	6d 91       	ld	r22, X+
     942:	8d 01       	movw	r16, r26
     944:	d6 01       	movw	r26, r12
     946:	ed 91       	ld	r30, X+
     948:	fc 91       	ld	r31, X
     94a:	01 90       	ld	r0, Z+
     94c:	f0 81       	ld	r31, Z
     94e:	e0 2d       	mov	r30, r0
     950:	c6 01       	movw	r24, r12
     952:	19 95       	eicall
     954:	89 2b       	or	r24, r25
     956:	11 f0       	breq	.+4      	; 0x95c <_ZN5Print5writeEPKhj+0x3e>
     958:	21 96       	adiw	r28, 0x01	; 1
     95a:	ee cf       	rjmp	.-36     	; 0x938 <_ZN5Print5writeEPKhj+0x1a>
     95c:	7e 01       	movw	r14, r28
     95e:	c7 01       	movw	r24, r14
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	08 95       	ret

00000972 <_ZN5Print5writeEPKc>:
     972:	61 15       	cp	r22, r1
     974:	71 05       	cpc	r23, r1
     976:	79 f0       	breq	.+30     	; 0x996 <_ZN5Print5writeEPKc+0x24>
     978:	fb 01       	movw	r30, r22
     97a:	01 90       	ld	r0, Z+
     97c:	00 20       	and	r0, r0
     97e:	e9 f7       	brne	.-6      	; 0x97a <_ZN5Print5writeEPKc+0x8>
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	af 01       	movw	r20, r30
     984:	46 1b       	sub	r20, r22
     986:	57 0b       	sbc	r21, r23
     988:	dc 01       	movw	r26, r24
     98a:	ed 91       	ld	r30, X+
     98c:	fc 91       	ld	r31, X
     98e:	02 80       	ldd	r0, Z+2	; 0x02
     990:	f3 81       	ldd	r31, Z+3	; 0x03
     992:	e0 2d       	mov	r30, r0
     994:	19 94       	eijmp
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 95       	ret

0000099c <_ZN5Print5printEPKc>:
     99c:	ea cf       	rjmp	.-44     	; 0x972 <_ZN5Print5writeEPKc>

0000099e <_ZN5Print5printEc>:
     99e:	dc 01       	movw	r26, r24
     9a0:	ed 91       	ld	r30, X+
     9a2:	fc 91       	ld	r31, X
     9a4:	01 90       	ld	r0, Z+
     9a6:	f0 81       	ld	r31, Z
     9a8:	e0 2d       	mov	r30, r0
     9aa:	19 94       	eijmp

000009ac <_ZN5Print7printlnEv>:
     9ac:	6f e8       	ldi	r22, 0x8F	; 143
     9ae:	72 e0       	ldi	r23, 0x02	; 2
     9b0:	e0 cf       	rjmp	.-64     	; 0x972 <_ZN5Print5writeEPKc>

000009b2 <_ZN5Print7printlnEPKc>:
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
     9bc:	da df       	rcall	.-76     	; 0x972 <_ZN5Print5writeEPKc>
     9be:	8c 01       	movw	r16, r24
     9c0:	ce 01       	movw	r24, r28
     9c2:	f4 df       	rcall	.-24     	; 0x9ac <_ZN5Print7printlnEv>
     9c4:	80 0f       	add	r24, r16
     9c6:	91 1f       	adc	r25, r17
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	08 95       	ret

000009d2 <_ZN5Print11printNumberEmh>:
     9d2:	8f 92       	push	r8
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	a1 97       	sbiw	r28, 0x21	; 33
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	7c 01       	movw	r14, r24
     9f8:	fa 01       	movw	r30, r20
     9fa:	cb 01       	movw	r24, r22
     9fc:	19 a2       	std	Y+33, r1	; 0x21
     9fe:	22 30       	cpi	r18, 0x02	; 2
     a00:	08 f4       	brcc	.+2      	; 0xa04 <_ZN5Print11printNumberEmh+0x32>
     a02:	2a e0       	ldi	r18, 0x0A	; 10
     a04:	8e 01       	movw	r16, r28
     a06:	0f 5d       	subi	r16, 0xDF	; 223
     a08:	1f 4f       	sbci	r17, 0xFF	; 255
     a0a:	82 2e       	mov	r8, r18
     a0c:	91 2c       	mov	r9, r1
     a0e:	a1 2c       	mov	r10, r1
     a10:	b1 2c       	mov	r11, r1
     a12:	bf 01       	movw	r22, r30
     a14:	a5 01       	movw	r20, r10
     a16:	94 01       	movw	r18, r8
     a18:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodsi4>
     a1c:	f9 01       	movw	r30, r18
     a1e:	ca 01       	movw	r24, r20
     a20:	01 50       	subi	r16, 0x01	; 1
     a22:	11 09       	sbc	r17, r1
     a24:	6a 30       	cpi	r22, 0x0A	; 10
     a26:	10 f4       	brcc	.+4      	; 0xa2c <_ZN5Print11printNumberEmh+0x5a>
     a28:	60 5d       	subi	r22, 0xD0	; 208
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <_ZN5Print11printNumberEmh+0x5c>
     a2c:	69 5c       	subi	r22, 0xC9	; 201
     a2e:	d8 01       	movw	r26, r16
     a30:	6c 93       	st	X, r22
     a32:	23 2b       	or	r18, r19
     a34:	24 2b       	or	r18, r20
     a36:	25 2b       	or	r18, r21
     a38:	61 f7       	brne	.-40     	; 0xa12 <_ZN5Print11printNumberEmh+0x40>
     a3a:	b8 01       	movw	r22, r16
     a3c:	c7 01       	movw	r24, r14
     a3e:	99 df       	rcall	.-206    	; 0x972 <_ZN5Print5writeEPKc>
     a40:	a1 96       	adiw	r28, 0x21	; 33
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	9f 90       	pop	r9
     a5e:	8f 90       	pop	r8
     a60:	08 95       	ret

00000a62 <_ZN5Print5printEmi>:
     a62:	21 15       	cp	r18, r1
     a64:	31 05       	cpc	r19, r1
     a66:	41 f4       	brne	.+16     	; 0xa78 <_ZN5Print5printEmi+0x16>
     a68:	dc 01       	movw	r26, r24
     a6a:	ed 91       	ld	r30, X+
     a6c:	fc 91       	ld	r31, X
     a6e:	01 90       	ld	r0, Z+
     a70:	f0 81       	ld	r31, Z
     a72:	e0 2d       	mov	r30, r0
     a74:	64 2f       	mov	r22, r20
     a76:	19 94       	eijmp
     a78:	ac cf       	rjmp	.-168    	; 0x9d2 <_ZN5Print11printNumberEmh>

00000a7a <_ZN5Print5printEji>:
     a7a:	9a 01       	movw	r18, r20
     a7c:	ab 01       	movw	r20, r22
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	ef cf       	rjmp	.-34     	; 0xa62 <_ZN5Print5printEmi>

00000a84 <_ZN5Print5printEli>:
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	21 15       	cp	r18, r1
     a96:	31 05       	cpc	r19, r1
     a98:	81 f4       	brne	.+32     	; 0xaba <_ZN5Print5printEli+0x36>
     a9a:	dc 01       	movw	r26, r24
     a9c:	ed 91       	ld	r30, X+
     a9e:	fc 91       	ld	r31, X
     aa0:	01 90       	ld	r0, Z+
     aa2:	f0 81       	ld	r31, Z
     aa4:	e0 2d       	mov	r30, r0
     aa6:	64 2f       	mov	r22, r20
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	19 94       	eijmp
     aba:	2a 30       	cpi	r18, 0x0A	; 10
     abc:	31 05       	cpc	r19, r1
     abe:	f1 f4       	brne	.+60     	; 0xafc <_ZN5Print5printEli+0x78>
     ac0:	77 ff       	sbrs	r23, 7
     ac2:	1b c0       	rjmp	.+54     	; 0xafa <_ZN5Print5printEli+0x76>
     ac4:	6a 01       	movw	r12, r20
     ac6:	7b 01       	movw	r14, r22
     ac8:	ec 01       	movw	r28, r24
     aca:	6d e2       	ldi	r22, 0x2D	; 45
     acc:	68 df       	rcall	.-304    	; 0x99e <_ZN5Print5printEc>
     ace:	8c 01       	movw	r16, r24
     ad0:	44 27       	eor	r20, r20
     ad2:	55 27       	eor	r21, r21
     ad4:	ba 01       	movw	r22, r20
     ad6:	4c 19       	sub	r20, r12
     ad8:	5d 09       	sbc	r21, r13
     ada:	6e 09       	sbc	r22, r14
     adc:	7f 09       	sbc	r23, r15
     ade:	2a e0       	ldi	r18, 0x0A	; 10
     ae0:	ce 01       	movw	r24, r28
     ae2:	77 df       	rcall	.-274    	; 0x9d2 <_ZN5Print11printNumberEmh>
     ae4:	80 0f       	add	r24, r16
     ae6:	91 1f       	adc	r25, r17
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	08 95       	ret
     afa:	2a e0       	ldi	r18, 0x0A	; 10
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	62 cf       	rjmp	.-316    	; 0x9d2 <_ZN5Print11printNumberEmh>

00000b0e <_ZN5Print5printEii>:
     b0e:	9a 01       	movw	r18, r20
     b10:	ab 01       	movw	r20, r22
     b12:	77 0f       	add	r23, r23
     b14:	66 0b       	sbc	r22, r22
     b16:	77 0b       	sbc	r23, r23
     b18:	b5 cf       	rjmp	.-150    	; 0xa84 <_ZN5Print5printEli>

00000b1a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     b1a:	7f 92       	push	r7
     b1c:	8f 92       	push	r8
     b1e:	9f 92       	push	r9
     b20:	af 92       	push	r10
     b22:	bf 92       	push	r11
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	8c 01       	movw	r16, r24
     b36:	6a 01       	movw	r12, r20
     b38:	7b 01       	movw	r14, r22
     b3a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	c7 01       	movw	r24, r14
     b42:	b6 01       	movw	r22, r12
     b44:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__unordsf2>
     b48:	88 23       	and	r24, r24
     b4a:	19 f0       	breq	.+6      	; 0xb52 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     b4c:	62 e9       	ldi	r22, 0x92	; 146
     b4e:	72 e0       	ldi	r23, 0x02	; 2
     b50:	27 c0       	rjmp	.+78     	; 0xba0 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     b52:	46 01       	movw	r8, r12
     b54:	57 01       	movw	r10, r14
     b56:	e8 94       	clt
     b58:	b7 f8       	bld	r11, 7
     b5a:	2f ef       	ldi	r18, 0xFF	; 255
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	4f e7       	ldi	r20, 0x7F	; 127
     b60:	5f e7       	ldi	r21, 0x7F	; 127
     b62:	c5 01       	movw	r24, r10
     b64:	b4 01       	movw	r22, r8
     b66:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__unordsf2>
     b6a:	81 11       	cpse	r24, r1
     b6c:	0d c0       	rjmp	.+26     	; 0xb88 <_ZN5Print10printFloatEdh+0x6e>
     b6e:	2f ef       	ldi	r18, 0xFF	; 255
     b70:	3f ef       	ldi	r19, 0xFF	; 255
     b72:	4f e7       	ldi	r20, 0x7F	; 127
     b74:	5f e7       	ldi	r21, 0x7F	; 127
     b76:	c5 01       	movw	r24, r10
     b78:	b4 01       	movw	r22, r8
     b7a:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
     b7e:	18 16       	cp	r1, r24
     b80:	1c f4       	brge	.+6      	; 0xb88 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     b82:	66 e9       	ldi	r22, 0x96	; 150
     b84:	72 e0       	ldi	r23, 0x02	; 2
     b86:	0c c0       	rjmp	.+24     	; 0xba0 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	3f ef       	ldi	r19, 0xFF	; 255
     b8c:	4f e7       	ldi	r20, 0x7F	; 127
     b8e:	5f e4       	ldi	r21, 0x4F	; 79
     b90:	c7 01       	movw	r24, r14
     b92:	b6 01       	movw	r22, r12
     b94:	0e 94 0e 13 	call	0x261c	; 0x261c <__gesf2>
     b98:	18 16       	cp	r1, r24
     b9a:	8c f4       	brge	.+34     	; 0xbbe <_ZN5Print10printFloatEdh+0xa4>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     b9c:	6a e9       	ldi	r22, 0x9A	; 154
     b9e:	72 e0       	ldi	r23, 0x02	; 2
     ba0:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     bbc:	da ce       	rjmp	.-588    	; 0x972 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     bbe:	2f ef       	ldi	r18, 0xFF	; 255
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	5f ec       	ldi	r21, 0xCF	; 207
     bc6:	c7 01       	movw	r24, r14
     bc8:	b6 01       	movw	r22, r12
     bca:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
     bce:	87 fd       	sbrc	r24, 7
     bd0:	e5 cf       	rjmp	.-54     	; 0xb9c <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	c7 01       	movw	r24, r14
     bda:	b6 01       	movw	r22, r12
     bdc:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
     be0:	87 ff       	sbrs	r24, 7
     be2:	09 c0       	rjmp	.+18     	; 0xbf6 <_ZN5Print10printFloatEdh+0xdc>
  {
     n += print('-');
     be4:	6d e2       	ldi	r22, 0x2D	; 45
     be6:	c8 01       	movw	r24, r16
     be8:	da de       	rcall	.-588    	; 0x99e <_ZN5Print5printEc>
     bea:	ec 01       	movw	r28, r24
     number = -number;
     bec:	f7 fa       	bst	r15, 7
     bee:	f0 94       	com	r15
     bf0:	f7 f8       	bld	r15, 7
     bf2:	f0 94       	com	r15
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <_ZN5Print10printFloatEdh+0xe0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     bfa:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     c04:	7b 14       	cp	r7, r11
     c06:	41 f0       	breq	.+16     	; 0xc18 <_ZN5Print10printFloatEdh+0xfe>
    rounding /= 10.0;
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1a 12 	call	0x2434	; 0x2434 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     c14:	b3 94       	inc	r11
     c16:	f6 cf       	rjmp	.-20     	; 0xc04 <_ZN5Print10printFloatEdh+0xea>
    rounding /= 10.0;
  
  number += rounding;
     c18:	a7 01       	movw	r20, r14
     c1a:	96 01       	movw	r18, r12
     c1c:	0e 94 b0 11 	call	0x2360	; 0x2360 <__addsf3>
     c20:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     c22:	7c 01       	movw	r14, r24
     c24:	17 dc       	rcall	.-2002   	; 0x454 <__fixunssfsi>
     c26:	4b 01       	movw	r8, r22
     c28:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     c2a:	2a e0       	ldi	r18, 0x0A	; 10
     c2c:	ab 01       	movw	r20, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	c8 01       	movw	r24, r16
     c32:	cf de       	rcall	.-610    	; 0x9d2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     c34:	c8 0f       	add	r28, r24
     c36:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     c38:	77 20       	and	r7, r7
     c3a:	a1 f1       	breq	.+104    	; 0xca4 <_ZN5Print10printFloatEdh+0x18a>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     c3c:	c5 01       	movw	r24, r10
     c3e:	b4 01       	movw	r22, r8
     c40:	0e 94 85 12 	call	0x250a	; 0x250a <__floatunsisf>
     c44:	9b 01       	movw	r18, r22
     c46:	ac 01       	movw	r20, r24
     c48:	c7 01       	movw	r24, r14
     c4a:	b6 01       	movw	r22, r12
     c4c:	0e 94 af 11 	call	0x235e	; 0x235e <__subsf3>
     c50:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     c52:	7c 01       	movw	r14, r24
     c54:	6e e2       	ldi	r22, 0x2E	; 46
     c56:	c8 01       	movw	r24, r16
     c58:	a2 de       	rcall	.-700    	; 0x99e <_ZN5Print5printEc>
     c5a:	c8 0f       	add	r28, r24
     c5c:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e2       	ldi	r20, 0x20	; 32
     c64:	51 e4       	ldi	r21, 0x41	; 65
     c66:	c7 01       	movw	r24, r14
     c68:	b6 01       	movw	r22, r12
     c6a:	0e 94 12 13 	call	0x2624	; 0x2624 <__mulsf3>
     c6e:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
     c70:	5c 01       	movw	r10, r24
     c72:	f0 db       	rcall	.-2080   	; 0x454 <__fixunssfsi>
     c74:	6b 01       	movw	r12, r22
    n += print(toPrint);
     c76:	7c 01       	movw	r14, r24
     c78:	4a e0       	ldi	r20, 0x0A	; 10
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	c8 01       	movw	r24, r16
     c7e:	fd de       	rcall	.-518    	; 0xa7a <_ZN5Print5printEji>
     c80:	c8 0f       	add	r28, r24
     c82:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     c84:	b6 01       	movw	r22, r12
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 85 12 	call	0x250a	; 0x250a <__floatunsisf>
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	c5 01       	movw	r24, r10
     c94:	b4 01       	movw	r22, r8
     c96:	0e 94 af 11 	call	0x235e	; 0x235e <__subsf3>
     c9a:	6b 01       	movw	r12, r22
     c9c:	7c 01       	movw	r14, r24
     c9e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     ca0:	71 10       	cpse	r7, r1
     ca2:	dd cf       	rjmp	.-70     	; 0xc5e <_ZN5Print10printFloatEdh+0x144>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     ca4:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	cf 90       	pop	r12
     cb6:	bf 90       	pop	r11
     cb8:	af 90       	pop	r10
     cba:	9f 90       	pop	r9
     cbc:	8f 90       	pop	r8
     cbe:	7f 90       	pop	r7
     cc0:	08 95       	ret

00000cc2 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     cc2:	2b cf       	rjmp	.-426    	; 0xb1a <_ZN5Print10printFloatEdh>

00000cc4 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
     cda:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <timer0_millis>
     cde:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <timer0_millis+0x1>
     ce2:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <timer0_millis+0x2>
     ce6:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <timer0_millis+0x3>
     cea:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <timer0_fract>
     cee:	23 e0       	ldi	r18, 0x03	; 3
     cf0:	23 0f       	add	r18, r19
     cf2:	2d 37       	cpi	r18, 0x7D	; 125
     cf4:	20 f4       	brcc	.+8      	; 0xcfe <__vector_23+0x3a>
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	a1 1d       	adc	r26, r1
     cfa:	b1 1d       	adc	r27, r1
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__vector_23+0x44>
     cfe:	26 e8       	ldi	r18, 0x86	; 134
     d00:	23 0f       	add	r18, r19
     d02:	02 96       	adiw	r24, 0x02	; 2
     d04:	a1 1d       	adc	r26, r1
     d06:	b1 1d       	adc	r27, r1
     d08:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <timer0_fract>
     d0c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <timer0_millis>
     d10:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <timer0_millis+0x1>
     d14:	a0 93 75 03 	sts	0x0375, r26	; 0x800375 <timer0_millis+0x2>
     d18:	b0 93 76 03 	sts	0x0376, r27	; 0x800376 <timer0_millis+0x3>
     d1c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <timer0_overflow_count>
     d20:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <timer0_overflow_count+0x1>
     d24:	a0 91 79 03 	lds	r26, 0x0379	; 0x800379 <timer0_overflow_count+0x2>
     d28:	b0 91 7a 03 	lds	r27, 0x037A	; 0x80037a <timer0_overflow_count+0x3>
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	a1 1d       	adc	r26, r1
     d30:	b1 1d       	adc	r27, r1
     d32:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <timer0_overflow_count>
     d36:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <timer0_overflow_count+0x1>
     d3a:	a0 93 79 03 	sts	0x0379, r26	; 0x800379 <timer0_overflow_count+0x2>
     d3e:	b0 93 7a 03 	sts	0x037A, r27	; 0x80037a <timer0_overflow_count+0x3>
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <millis>:
     d58:	2f b7       	in	r18, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <timer0_millis>
     d60:	70 91 74 03 	lds	r23, 0x0374	; 0x800374 <timer0_millis+0x1>
     d64:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <timer0_millis+0x2>
     d68:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <timer0_millis+0x3>
     d6c:	2f bf       	out	0x3f, r18	; 63
     d6e:	08 95       	ret

00000d70 <micros>:
     d70:	3f b7       	in	r19, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <timer0_overflow_count>
     d78:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <timer0_overflow_count+0x1>
     d7c:	a0 91 79 03 	lds	r26, 0x0379	; 0x800379 <timer0_overflow_count+0x2>
     d80:	b0 91 7a 03 	lds	r27, 0x037A	; 0x80037a <timer0_overflow_count+0x3>
     d84:	26 b5       	in	r18, 0x26	; 38
     d86:	a8 9b       	sbis	0x15, 0	; 21
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <micros+0x24>
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	19 f0       	breq	.+6      	; 0xd94 <micros+0x24>
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	a1 1d       	adc	r26, r1
     d92:	b1 1d       	adc	r27, r1
     d94:	3f bf       	out	0x3f, r19	; 63
     d96:	ba 2f       	mov	r27, r26
     d98:	a9 2f       	mov	r26, r25
     d9a:	98 2f       	mov	r25, r24
     d9c:	88 27       	eor	r24, r24
     d9e:	82 0f       	add	r24, r18
     da0:	91 1d       	adc	r25, r1
     da2:	a1 1d       	adc	r26, r1
     da4:	b1 1d       	adc	r27, r1
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	42 e0       	ldi	r20, 0x02	; 2
     dac:	66 0f       	add	r22, r22
     dae:	77 1f       	adc	r23, r23
     db0:	88 1f       	adc	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	4a 95       	dec	r20
     db6:	d1 f7       	brne	.-12     	; 0xdac <micros+0x3c>
     db8:	08 95       	ret

00000dba <delay>:
     dba:	8f 92       	push	r8
     dbc:	9f 92       	push	r9
     dbe:	af 92       	push	r10
     dc0:	bf 92       	push	r11
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	6b 01       	movw	r12, r22
     dcc:	7c 01       	movw	r14, r24
     dce:	d0 df       	rcall	.-96     	; 0xd70 <micros>
     dd0:	4b 01       	movw	r8, r22
     dd2:	5c 01       	movw	r10, r24
     dd4:	c1 14       	cp	r12, r1
     dd6:	d1 04       	cpc	r13, r1
     dd8:	e1 04       	cpc	r14, r1
     dda:	f1 04       	cpc	r15, r1
     ddc:	f1 f0       	breq	.+60     	; 0xe1a <delay+0x60>
     dde:	10 d7       	rcall	.+3616   	; 0x1c00 <yield>
     de0:	c7 df       	rcall	.-114    	; 0xd70 <micros>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	88 19       	sub	r24, r8
     de8:	99 09       	sbc	r25, r9
     dea:	aa 09       	sbc	r26, r10
     dec:	bb 09       	sbc	r27, r11
     dee:	88 3e       	cpi	r24, 0xE8	; 232
     df0:	93 40       	sbci	r25, 0x03	; 3
     df2:	a1 05       	cpc	r26, r1
     df4:	b1 05       	cpc	r27, r1
     df6:	70 f3       	brcs	.-36     	; 0xdd4 <delay+0x1a>
     df8:	21 e0       	ldi	r18, 0x01	; 1
     dfa:	c2 1a       	sub	r12, r18
     dfc:	d1 08       	sbc	r13, r1
     dfe:	e1 08       	sbc	r14, r1
     e00:	f1 08       	sbc	r15, r1
     e02:	88 ee       	ldi	r24, 0xE8	; 232
     e04:	88 0e       	add	r8, r24
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	98 1e       	adc	r9, r24
     e0a:	a1 1c       	adc	r10, r1
     e0c:	b1 1c       	adc	r11, r1
     e0e:	c1 14       	cp	r12, r1
     e10:	d1 04       	cpc	r13, r1
     e12:	e1 04       	cpc	r14, r1
     e14:	f1 04       	cpc	r15, r1
     e16:	21 f7       	brne	.-56     	; 0xde0 <delay+0x26>
     e18:	dd cf       	rjmp	.-70     	; 0xdd4 <delay+0x1a>
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	bf 90       	pop	r11
     e24:	af 90       	pop	r10
     e26:	9f 90       	pop	r9
     e28:	8f 90       	pop	r8
     e2a:	08 95       	ret

00000e2c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e2c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e2e:	84 b5       	in	r24, 0x24	; 36
     e30:	82 60       	ori	r24, 0x02	; 2
     e32:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e34:	84 b5       	in	r24, 0x24	; 36
     e36:	81 60       	ori	r24, 0x01	; 1
     e38:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e3a:	85 b5       	in	r24, 0x25	; 37
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	81 60       	ori	r24, 0x01	; 1
     e44:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e46:	ee e6       	ldi	r30, 0x6E	; 110
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e50:	e1 e8       	ldi	r30, 0x81	; 129
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e56:	80 81       	ld	r24, Z
     e58:	82 60       	ori	r24, 0x02	; 2
     e5a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e5c:	80 81       	ld	r24, Z
     e5e:	81 60       	ori	r24, 0x01	; 1
     e60:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e62:	e0 e8       	ldi	r30, 0x80	; 128
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	81 60       	ori	r24, 0x01	; 1
     e6a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e6c:	e1 eb       	ldi	r30, 0xB1	; 177
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e76:	e0 eb       	ldi	r30, 0xB0	; 176
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     e80:	e1 e9       	ldi	r30, 0x91	; 145
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     e8a:	80 81       	ld	r24, Z
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     e90:	e0 e9       	ldi	r30, 0x90	; 144
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     e9a:	e1 ea       	ldi	r30, 0xA1	; 161
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	82 60       	ori	r24, 0x02	; 2
     ea2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     ea4:	80 81       	ld	r24, Z
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     eaa:	e0 ea       	ldi	r30, 0xA0	; 160
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     eb4:	e1 e2       	ldi	r30, 0x21	; 33
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	80 81       	ld	r24, Z
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     ebe:	80 81       	ld	r24, Z
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     ec4:	e0 e2       	ldi	r30, 0x20	; 32
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	80 81       	ld	r24, Z
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     ece:	ea e7       	ldi	r30, 0x7A	; 122
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	84 60       	ori	r24, 0x04	; 4
     ed6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     ed8:	80 81       	ld	r24, Z
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     ede:	80 81       	ld	r24, Z
     ee0:	81 60       	ori	r24, 0x01	; 1
     ee2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ee4:	80 81       	ld	r24, Z
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     eea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     eee:	08 95       	ret

00000ef0 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	18 2f       	mov	r17, r24
     ef8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	16 d1       	rcall	.+556    	; 0x112a <pinMode>
	if (val == 0)
     efe:	20 97       	sbiw	r28, 0x00	; 0
     f00:	11 f4       	brne	.+4      	; 0xf06 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	04 c0       	rjmp	.+8      	; 0xf0e <analogWrite+0x1e>
	}
	else if (val == 255)
     f06:	cf 3f       	cpi	r28, 0xFF	; 255
     f08:	d1 05       	cpc	r29, r1
     f0a:	31 f4       	brne	.+12     	; 0xf18 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
     f14:	1f 91       	pop	r17
     f16:	45 c1       	rjmp	.+650    	; 0x11a2 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
     f18:	e1 2f       	mov	r30, r17
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	e4 5d       	subi	r30, 0xD4	; 212
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	e4 91       	lpm	r30, Z
     f22:	8e 2f       	mov	r24, r30
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	fc 01       	movw	r30, r24
     f28:	31 97       	sbiw	r30, 0x01	; 1
     f2a:	e2 31       	cpi	r30, 0x12	; 18
     f2c:	f1 05       	cpc	r31, r1
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <analogWrite+0x42>
     f30:	9d c0       	rjmp	.+314    	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
     f32:	88 27       	eor	r24, r24
     f34:	ee 58       	subi	r30, 0x8E	; 142
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     f3e:	84 b5       	in	r24, 0x24	; 36
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     f44:	c7 bd       	out	0x27, r28	; 39
				break;
     f46:	97 c0       	rjmp	.+302    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     f48:	84 b5       	in	r24, 0x24	; 36
     f4a:	80 62       	ori	r24, 0x20	; 32
     f4c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     f4e:	c8 bd       	out	0x28, r28	; 40
				break;
     f50:	92 c0       	rjmp	.+292    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     f52:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
     f5c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     f60:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
     f64:	88 c0       	rjmp	.+272    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     f66:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f6a:	80 62       	ori	r24, 0x20	; 32
     f6c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
     f70:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
     f74:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
     f78:	7e c0       	rjmp	.+252    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
     f7a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
     f84:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
     f88:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
     f8c:	74 c0       	rjmp	.+232    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     f8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     f92:	80 68       	ori	r24, 0x80	; 128
     f94:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
     f98:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
     f9c:	6c c0       	rjmp	.+216    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     f9e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     fa2:	80 62       	ori	r24, 0x20	; 32
     fa4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
     fa8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
     fac:	64 c0       	rjmp	.+200    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
     fae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
     fb8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     fbc:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
     fc0:	5a c0       	rjmp	.+180    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
     fc2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fc6:	80 62       	ori	r24, 0x20	; 32
     fc8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
     fcc:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
     fd0:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
     fd4:	50 c0       	rjmp	.+160    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
     fd6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fda:	88 60       	ori	r24, 0x08	; 8
     fdc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
     fe0:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
     fe4:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
     fe8:	46 c0       	rjmp	.+140    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
     fea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     fee:	80 68       	ori	r24, 0x80	; 128
     ff0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
     ff4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     ff8:	8f 7b       	andi	r24, 0xBF	; 191
     ffa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
     ffe:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    1002:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    1006:	37 c0       	rjmp	.+110    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    1008:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    100c:	80 62       	ori	r24, 0x20	; 32
    100e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    1012:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    1016:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    101a:	2d c0       	rjmp	.+90     	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    101c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1020:	88 60       	ori	r24, 0x08	; 8
    1022:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    1026:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    102a:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    102e:	23 c0       	rjmp	.+70     	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    1030:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    103a:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    103e:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    1042:	19 c0       	rjmp	.+50     	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    1044:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1048:	80 62       	ori	r24, 0x20	; 32
    104a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    104e:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    1052:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    1058:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    105c:	88 60       	ori	r24, 0x08	; 8
    105e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    1062:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    1066:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    106c:	c0 38       	cpi	r28, 0x80	; 128
    106e:	d1 05       	cpc	r29, r1
    1070:	0c f0       	brlt	.+2      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    1072:	4c cf       	rjmp	.-360    	; 0xf0c <analogWrite+0x1c>
    1074:	46 cf       	rjmp	.-372    	; 0xf02 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	08 95       	ret

0000107e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	fc 01       	movw	r30, r24
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	e2 31       	cpi	r30, 0x12	; 18
    1086:	f1 05       	cpc	r31, r1
    1088:	08 f0       	brcs	.+2      	; 0x108c <turnOffPWM+0xe>
    108a:	4e c0       	rjmp	.+156    	; 0x1128 <turnOffPWM+0xaa>
    108c:	88 27       	eor	r24, r24
    108e:	ec 57       	subi	r30, 0x7C	; 124
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	8f 4f       	sbci	r24, 0xFF	; 255
    1094:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1098:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    10a4:	8f 7d       	andi	r24, 0xDF	; 223
    10a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    10aa:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    10ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	f9 cf       	rjmp	.-14     	; 0x10a6 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10b4:	84 b5       	in	r24, 0x24	; 36
    10b6:	8f 77       	andi	r24, 0x7F	; 127
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    10ba:	84 b5       	in	r24, 0x24	; 36
    10bc:	8f 7d       	andi	r24, 0xDF	; 223
    10be:	84 bd       	out	0x24, r24	; 36
    10c0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10c2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    10c6:	8f 77       	andi	r24, 0x7F	; 127
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    10ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    10ce:	8f 7d       	andi	r24, 0xDF	; 223
    10d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    10d4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    10d6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10da:	8f 77       	andi	r24, 0x7F	; 127
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    10de:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10e2:	8f 7d       	andi	r24, 0xDF	; 223
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    10e6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10ea:	87 7f       	andi	r24, 0xF7	; 247
    10ec:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10f0:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    10f2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10f6:	8f 77       	andi	r24, 0x7F	; 127
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    10fa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10fe:	8f 7d       	andi	r24, 0xDF	; 223
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1102:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1106:	87 7f       	andi	r24, 0xF7	; 247
    1108:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    110c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    110e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1112:	8f 77       	andi	r24, 0x7F	; 127
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1116:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    111a:	8f 7d       	andi	r24, 0xDF	; 223
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    111e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1122:	87 7f       	andi	r24, 0xF7	; 247
    1124:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1128:	08 95       	ret

0000112a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	fc 01       	movw	r30, r24
    1132:	ee 58       	subi	r30, 0x8E	; 142
    1134:	fe 4f       	sbci	r31, 0xFE	; 254
    1136:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1138:	fc 01       	movw	r30, r24
    113a:	e8 54       	subi	r30, 0x48	; 72
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
    113e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1140:	88 23       	and	r24, r24
    1142:	61 f1       	breq	.+88     	; 0x119c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	fc 01       	movw	r30, r24
    114c:	e8 5e       	subi	r30, 0xE8	; 232
    114e:	fd 4f       	sbci	r31, 0xFD	; 253
    1150:	c5 91       	lpm	r28, Z+
    1152:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1154:	fc 01       	movw	r30, r24
    1156:	e2 50       	subi	r30, 0x02	; 2
    1158:	fe 4f       	sbci	r31, 0xFE	; 254
    115a:	a5 91       	lpm	r26, Z+
    115c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    115e:	61 11       	cpse	r22, r1
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1162:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1164:	f8 94       	cli
		*reg &= ~bit;
    1166:	88 81       	ld	r24, Y
    1168:	20 95       	com	r18
    116a:	82 23       	and	r24, r18
    116c:	88 83       	st	Y, r24
		*out &= ~bit;
    116e:	ec 91       	ld	r30, X
    1170:	2e 23       	and	r18, r30
    1172:	0b c0       	rjmp	.+22     	; 0x118a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1174:	62 30       	cpi	r22, 0x02	; 2
    1176:	61 f4       	brne	.+24     	; 0x1190 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1178:	9f b7       	in	r25, 0x3f	; 63
                cli();
    117a:	f8 94       	cli
		*reg &= ~bit;
    117c:	88 81       	ld	r24, Y
    117e:	32 2f       	mov	r19, r18
    1180:	30 95       	com	r19
    1182:	83 23       	and	r24, r19
    1184:	88 83       	st	Y, r24
		*out |= bit;
    1186:	ec 91       	ld	r30, X
    1188:	2e 2b       	or	r18, r30
    118a:	2c 93       	st	X, r18
		SREG = oldSREG;
    118c:	9f bf       	out	0x3f, r25	; 63
    118e:	06 c0       	rjmp	.+12     	; 0x119c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1190:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1192:	f8 94       	cli
		*reg |= bit;
    1194:	e8 81       	ld	r30, Y
    1196:	2e 2b       	or	r18, r30
    1198:	28 83       	st	Y, r18
		SREG = oldSREG;
    119a:	8f bf       	out	0x3f, r24	; 63
	}
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	f9 01       	movw	r30, r18
    11ae:	e4 5d       	subi	r30, 0xD4	; 212
    11b0:	fe 4f       	sbci	r31, 0xFE	; 254
    11b2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11b4:	f9 01       	movw	r30, r18
    11b6:	ee 58       	subi	r30, 0x8E	; 142
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11bc:	f9 01       	movw	r30, r18
    11be:	e8 54       	subi	r30, 0x48	; 72
    11c0:	fe 4f       	sbci	r31, 0xFE	; 254
    11c2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11c4:	cc 23       	and	r28, r28
    11c6:	b9 f0       	breq	.+46     	; 0x11f6 <digitalWrite+0x54>
    11c8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11ca:	81 11       	cpse	r24, r1
    11cc:	58 df       	rcall	.-336    	; 0x107e <turnOffPWM>

	out = portOutputRegister(port);
    11ce:	ec 2f       	mov	r30, r28
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	e2 50       	subi	r30, 0x02	; 2
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	a5 91       	lpm	r26, Z+
    11dc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11de:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11e0:	f8 94       	cli

	if (val == LOW) {
    11e2:	11 11       	cpse	r17, r1
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <digitalWrite+0x4c>
		*out &= ~bit;
    11e6:	8c 91       	ld	r24, X
    11e8:	d0 95       	com	r29
    11ea:	d8 23       	and	r29, r24
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    11ee:	ec 91       	ld	r30, X
    11f0:	de 2b       	or	r29, r30
    11f2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11f4:	9f bf       	out	0x3f, r25	; 63
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	08 95       	ret

000011fe <_ZN15Adafruit_BNO055D1Ev>:

    setMode(lastMode);
    return true;
  }
  return false;
}
    11fe:	08 95       	ret

00001200 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	8c 01       	movw	r16, r24
    120a:	eb 01       	movw	r28, r22
    120c:	88 e2       	ldi	r24, 0x28	; 40
    120e:	fb 01       	movw	r30, r22
    1210:	11 92       	st	Z+, r1
    1212:	8a 95       	dec	r24
    1214:	e9 f7       	brne	.-6      	; 0x1210 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x10>
    1216:	4b e0       	ldi	r20, 0x0B	; 11
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	6e e9       	ldi	r22, 0x9E	; 158
    121c:	72 e0       	ldi	r23, 0x02	; 2
    121e:	ce 01       	movw	r24, r28
    1220:	0e 94 c7 14 	call	0x298e	; 0x298e <strncpy>
    1224:	1b 86       	std	Y+11, r1	; 0x0b
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	8c 87       	std	Y+12, r24	; 0x0c
    1230:	9d 87       	std	Y+13, r25	; 0x0d
    1232:	ae 87       	std	Y+14, r26	; 0x0e
    1234:	bf 87       	std	Y+15, r27	; 0x0f
    1236:	f8 01       	movw	r30, r16
    1238:	84 81       	ldd	r24, Z+4	; 0x04
    123a:	95 81       	ldd	r25, Z+5	; 0x05
    123c:	a6 81       	ldd	r26, Z+6	; 0x06
    123e:	b7 81       	ldd	r27, Z+7	; 0x07
    1240:	88 8b       	std	Y+16, r24	; 0x10
    1242:	99 8b       	std	Y+17, r25	; 0x11
    1244:	aa 8b       	std	Y+18, r26	; 0x12
    1246:	bb 8b       	std	Y+19, r27	; 0x13
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a0 e0       	ldi	r26, 0x00	; 0
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	8c 8b       	std	Y+20, r24	; 0x14
    1252:	9d 8b       	std	Y+21, r25	; 0x15
    1254:	ae 8b       	std	Y+22, r26	; 0x16
    1256:	bf 8b       	std	Y+23, r27	; 0x17
    1258:	1c a2       	std	Y+36, r1	; 0x24
    125a:	1d a2       	std	Y+37, r1	; 0x25
    125c:	1e a2       	std	Y+38, r1	; 0x26
    125e:	1f a2       	std	Y+39, r1	; 0x27
    1260:	18 8e       	std	Y+24, r1	; 0x18
    1262:	19 8e       	std	Y+25, r1	; 0x19
    1264:	1a 8e       	std	Y+26, r1	; 0x1a
    1266:	1b 8e       	std	Y+27, r1	; 0x1b
    1268:	1c 8e       	std	Y+28, r1	; 0x1c
    126a:	1d 8e       	std	Y+29, r1	; 0x1d
    126c:	1e 8e       	std	Y+30, r1	; 0x1e
    126e:	1f 8e       	std	Y+31, r1	; 0x1f
    1270:	8a e0       	ldi	r24, 0x0A	; 10
    1272:	97 ed       	ldi	r25, 0xD7	; 215
    1274:	a3 e2       	ldi	r26, 0x23	; 35
    1276:	bc e3       	ldi	r27, 0x3C	; 60
    1278:	88 a3       	std	Y+32, r24	; 0x20
    127a:	99 a3       	std	Y+33, r25	; 0x21
    127c:	aa a3       	std	Y+34, r26	; 0x22
    127e:	bb a3       	std	Y+35, r27	; 0x23
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <_ZN15Adafruit_BNO055D0Ev>:
    128a:	bc c4       	rjmp	.+2424   	; 0x1c04 <_ZdlPv>

0000128c <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	ec 01       	movw	r28, r24
    129c:	d2 2e       	mov	r13, r18
    129e:	89 ea       	ldi	r24, 0xA9	; 169
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	99 83       	std	Y+1, r25	; 0x01
    12a4:	88 83       	st	Y, r24
    12a6:	1b 82       	std	Y+3, r1	; 0x03
    12a8:	1a 82       	std	Y+2, r1	; 0x02
    12aa:	4c 83       	std	Y+4, r20	; 0x04
    12ac:	5d 83       	std	Y+5, r21	; 0x05
    12ae:	6e 83       	std	Y+6, r22	; 0x06
    12b0:	7f 83       	std	Y+7, r23	; 0x07
    12b2:	86 e0       	ldi	r24, 0x06	; 6
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a5 d4       	rcall	.+2378   	; 0x1c02 <_Znwj>
    12b8:	7c 01       	movw	r14, r24
    12ba:	a8 01       	movw	r20, r16
    12bc:	6d 2d       	mov	r22, r13
    12be:	13 d2       	rcall	.+1062   	; 0x16e6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    12c0:	fb 82       	std	Y+3, r15	; 0x03
    12c2:	ea 82       	std	Y+2, r14	; 0x02
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	08 95       	ret

000012d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	1f 92       	push	r1
    12e2:	1f 92       	push	r1
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	69 83       	std	Y+1, r22	; 0x01
    12ea:	4a 83       	std	Y+2, r20	; 0x02
    12ec:	e1 2c       	mov	r14, r1
    12ee:	f1 2c       	mov	r15, r1
    12f0:	00 e0       	ldi	r16, 0x00	; 0
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	21 e0       	ldi	r18, 0x01	; 1
    12f6:	42 e0       	ldi	r20, 0x02	; 2
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	be 01       	movw	r22, r28
    12fc:	6f 5f       	subi	r22, 0xFF	; 255
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	fc 01       	movw	r30, r24
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	29 d2       	rcall	.+1106   	; 0x175a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	08 95       	ret

0000131a <_ZN15Adafruit_BNO0557setModeE24adafruit_bno055_opmode_t>:
    131a:	46 2f       	mov	r20, r22
    131c:	fc 01       	movw	r30, r24
    131e:	60 87       	std	Z+8, r22	; 0x08
    1320:	6d e3       	ldi	r22, 0x3D	; 61
    1322:	d8 df       	rcall	.-80     	; 0x12d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
    1324:	6e e1       	ldi	r22, 0x1E	; 30
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	46 cd       	rjmp	.-1396   	; 0xdba <delay>

0000132e <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
    1338:	06 2f       	mov	r16, r22
    133a:	18 85       	ldd	r17, Y+8	; 0x08
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	ed df       	rcall	.-38     	; 0x131a <_ZN15Adafruit_BNO0557setModeE24adafruit_bno055_opmode_t>
    1340:	69 e1       	ldi	r22, 0x19	; 25
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	38 dd       	rcall	.-1424   	; 0xdba <delay>
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	67 e0       	ldi	r22, 0x07	; 7
    134e:	ce 01       	movw	r24, r28
    1350:	c1 df       	rcall	.-126    	; 0x12d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
    1352:	00 23       	and	r16, r16
    1354:	11 f0       	breq	.+4      	; 0x135a <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x2c>
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	01 c0       	rjmp	.+2      	; 0x135c <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x2e>
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	6f e3       	ldi	r22, 0x3F	; 63
    135e:	ce 01       	movw	r24, r28
    1360:	b9 df       	rcall	.-142    	; 0x12d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
    1362:	6a e0       	ldi	r22, 0x0A	; 10
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	27 dd       	rcall	.-1458   	; 0xdba <delay>
    136c:	61 2f       	mov	r22, r17
    136e:	ce 01       	movw	r24, r28
    1370:	d4 df       	rcall	.-88     	; 0x131a <_ZN15Adafruit_BNO0557setModeE24adafruit_bno055_opmode_t>
    1372:	64 e1       	ldi	r22, 0x14	; 20
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	1b cd       	rjmp	.-1482   	; 0xdba <delay>

00001384 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
    1384:	ef 92       	push	r14
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	1f 92       	push	r1
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	69 83       	std	Y+1, r22	; 0x01
    1396:	e1 2c       	mov	r14, r1
    1398:	01 e0       	ldi	r16, 0x01	; 1
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	9e 01       	movw	r18, r28
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	b9 01       	movw	r22, r18
    13a8:	fc 01       	movw	r30, r24
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	9c d2       	rcall	.+1336   	; 0x18e8 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	0f 90       	pop	r0
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ef 90       	pop	r14
    13be:	08 95       	ret

000013c0 <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t>:
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
    13ce:	06 2f       	mov	r16, r22
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	ab d1       	rcall	.+854    	; 0x172e <_ZN18Adafruit_I2CDevice5beginEb>
    13d8:	85 e5       	ldi	r24, 0x55	; 85
    13da:	e8 2e       	mov	r14, r24
    13dc:	f1 2c       	mov	r15, r1
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	a4 d1       	rcall	.+840    	; 0x172e <_ZN18Adafruit_I2CDevice5beginEb>
    13e6:	18 2f       	mov	r17, r24
    13e8:	81 11       	cpse	r24, r1
    13ea:	0b c0       	rjmp	.+22     	; 0x1402 <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t+0x42>
    13ec:	6a e0       	ldi	r22, 0x0A	; 10
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	e2 dc       	rcall	.-1596   	; 0xdba <delay>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	e8 1a       	sub	r14, r24
    13fa:	f1 08       	sbc	r15, r1
    13fc:	81 f7       	brne	.-32     	; 0x13de <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t+0x1e>
    13fe:	10 e0       	ldi	r17, 0x00	; 0
    1400:	48 c0       	rjmp	.+144    	; 0x1492 <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t+0xd2>
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	ce 01       	movw	r24, r28
    1406:	be df       	rcall	.-132    	; 0x1384 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    1408:	80 3a       	cpi	r24, 0xA0	; 160
    140a:	51 f0       	breq	.+20     	; 0x1420 <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t+0x60>
    140c:	68 ee       	ldi	r22, 0xE8	; 232
    140e:	73 e0       	ldi	r23, 0x03	; 3
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	d2 dc       	rcall	.-1628   	; 0xdba <delay>
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	ce 01       	movw	r24, r28
    141a:	b4 df       	rcall	.-152    	; 0x1384 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    141c:	80 3a       	cpi	r24, 0xA0	; 160
    141e:	79 f7       	brne	.-34     	; 0x13fe <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t+0x3e>
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	ce 01       	movw	r24, r28
    1424:	7a df       	rcall	.-268    	; 0x131a <_ZN15Adafruit_BNO0557setModeE24adafruit_bno055_opmode_t>
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	6f e3       	ldi	r22, 0x3F	; 63
    142a:	ce 01       	movw	r24, r28
    142c:	53 df       	rcall	.-346    	; 0x12d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
    142e:	6e e1       	ldi	r22, 0x1E	; 30
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	c1 dc       	rcall	.-1662   	; 0xdba <delay>
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	ce 01       	movw	r24, r28
    143c:	a3 df       	rcall	.-186    	; 0x1384 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    143e:	80 3a       	cpi	r24, 0xA0	; 160
    1440:	29 f0       	breq	.+10     	; 0x144c <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t+0x8c>
    1442:	6a e0       	ldi	r22, 0x0A	; 10
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	f5 cf       	rjmp	.-22     	; 0x1436 <_ZN15Adafruit_BNO0555beginE24adafruit_bno055_opmode_t+0x76>
    144c:	62 e3       	ldi	r22, 0x32	; 50
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	b2 dc       	rcall	.-1692   	; 0xdba <delay>
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	6e e3       	ldi	r22, 0x3E	; 62
    145a:	ce 01       	movw	r24, r28
    145c:	3b df       	rcall	.-394    	; 0x12d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
    145e:	6a e0       	ldi	r22, 0x0A	; 10
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a9 dc       	rcall	.-1710   	; 0xdba <delay>
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	67 e0       	ldi	r22, 0x07	; 7
    146c:	ce 01       	movw	r24, r28
    146e:	32 df       	rcall	.-412    	; 0x12d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	6f e3       	ldi	r22, 0x3F	; 63
    1474:	ce 01       	movw	r24, r28
    1476:	2e df       	rcall	.-420    	; 0x12d4 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
    1478:	6a e0       	ldi	r22, 0x0A	; 10
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9c dc       	rcall	.-1736   	; 0xdba <delay>
    1482:	60 2f       	mov	r22, r16
    1484:	ce 01       	movw	r24, r28
    1486:	49 df       	rcall	.-366    	; 0x131a <_ZN15Adafruit_BNO0557setModeE24adafruit_bno055_opmode_t>
    1488:	64 e1       	ldi	r22, 0x14	; 20
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	94 dc       	rcall	.-1752   	; 0xdba <delay>
    1492:	81 2f       	mov	r24, r17
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	08 95       	ret

000014a2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
    14a2:	ef 92       	push	r14
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	1f 92       	push	r1
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	69 83       	std	Y+1, r22	; 0x01
    14b4:	02 2f       	mov	r16, r18
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	e1 2c       	mov	r14, r1
    14ba:	9a 01       	movw	r18, r20
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	fc 01       	movw	r30, r24
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	0d d2       	rcall	.+1050   	; 0x18e8 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
    14ce:	0f 90       	pop	r0
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ef 90       	pop	r14
    14da:	08 95       	ret

000014dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x14>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x16>
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	8c 01       	movw	r16, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	b4 2e       	mov	r11, r20

namespace imu {

template <uint8_t N> class Vector {
public:
  Vector() { memset(p_vec, 0, sizeof(double) * N); }
    14fc:	2c e0       	ldi	r18, 0x0C	; 12
    14fe:	f8 01       	movw	r30, r16
    1500:	11 92       	st	Z+, r1
    1502:	2a 95       	dec	r18
    1504:	e9 f7       	brne	.-6      	; 0x1500 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x24>
  imu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
    1506:	ae 01       	movw	r20, r28
    1508:	4f 5f       	subi	r20, 0xFF	; 255
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	26 e0       	ldi	r18, 0x06	; 6
    150e:	fa 01       	movw	r30, r20
    1510:	11 92       	st	Z+, r1
    1512:	2a 95       	dec	r18
    1514:	e9 f7       	brne	.-6      	; 0x1510 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x34>

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
    1516:	26 e0       	ldi	r18, 0x06	; 6
    1518:	6b 2d       	mov	r22, r11
    151a:	c3 df       	rcall	.-122    	; 0x14a2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
    151c:	69 81       	ldd	r22, Y+1	; 0x01
    151e:	7a 81       	ldd	r23, Y+2	; 0x02
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
    1520:	cb 80       	ldd	r12, Y+3	; 0x03
    1522:	dc 80       	ldd	r13, Y+4	; 0x04
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
    1524:	ed 80       	ldd	r14, Y+5	; 0x05
    1526:	fe 80       	ldd	r15, Y+6	; 0x06

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
    1528:	f4 e1       	ldi	r31, 0x14	; 20
    152a:	bf 16       	cp	r11, r31
    152c:	81 f0       	breq	.+32     	; 0x154e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x72>
    152e:	fb 15       	cp	r31, r11
    1530:	28 f0       	brcs	.+10     	; 0x153c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x60>
    1532:	88 e0       	ldi	r24, 0x08	; 8
    1534:	b8 16       	cp	r11, r24
    1536:	b9 f1       	breq	.+110    	; 0x15a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xca>
    1538:	ee e0       	ldi	r30, 0x0E	; 14
    153a:	07 c0       	rjmp	.+14     	; 0x154a <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x6e>
    153c:	f8 e2       	ldi	r31, 0x28	; 40
    153e:	bf 16       	cp	r11, r31
    1540:	91 f1       	breq	.+100    	; 0x15a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xca>
    1542:	8e e2       	ldi	r24, 0x2E	; 46
    1544:	b8 16       	cp	r11, r24
    1546:	79 f1       	breq	.+94     	; 0x15a6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xca>
    1548:	ea e1       	ldi	r30, 0x1A	; 26
    154a:	be 12       	cpse	r11, r30
    154c:	59 c0       	rjmp	.+178    	; 0x1600 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x124>
    xyz[1] = ((double)y) / 16.0;
    xyz[2] = ((double)z) / 16.0;
    break;
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
    154e:	07 2e       	mov	r0, r23
    1550:	00 0c       	add	r0, r0
    1552:	88 0b       	sbc	r24, r24
    1554:	99 0b       	sbc	r25, r25
    1556:	db d7       	rcall	.+4022   	; 0x250e <__floatsisf>
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5d e3       	ldi	r21, 0x3D	; 61
    1560:	0e 94 12 13 	call	0x2624	; 0x2624 <__mulsf3>
    1564:	f8 01       	movw	r30, r16
    1566:	60 83       	st	Z, r22
    1568:	71 83       	std	Z+1, r23	; 0x01
    156a:	82 83       	std	Z+2, r24	; 0x02
    156c:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 16.0;
    156e:	b6 01       	movw	r22, r12
    1570:	dd 0c       	add	r13, r13
    1572:	88 0b       	sbc	r24, r24
    1574:	99 0b       	sbc	r25, r25
    1576:	cb d7       	rcall	.+3990   	; 0x250e <__floatsisf>
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5d e3       	ldi	r21, 0x3D	; 61
    1580:	0e 94 12 13 	call	0x2624	; 0x2624 <__mulsf3>
    1584:	f8 01       	movw	r30, r16
    1586:	64 83       	std	Z+4, r22	; 0x04
    1588:	75 83       	std	Z+5, r23	; 0x05
    158a:	86 83       	std	Z+6, r24	; 0x06
    158c:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 16.0;
    158e:	b7 01       	movw	r22, r14
    1590:	ff 0c       	add	r15, r15
    1592:	88 0b       	sbc	r24, r24
    1594:	99 0b       	sbc	r25, r25
    1596:	bb d7       	rcall	.+3958   	; 0x250e <__floatsisf>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5d e3       	ldi	r21, 0x3D	; 61
    15a0:	0e 94 12 13 	call	0x2624	; 0x2624 <__mulsf3>
    15a4:	28 c0       	rjmp	.+80     	; 0x15f6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x11a>
    xyz[1] = ((double)y) / 100.0;
    xyz[2] = ((double)z) / 100.0;
    break;
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
    15a6:	07 2e       	mov	r0, r23
    15a8:	00 0c       	add	r0, r0
    15aa:	88 0b       	sbc	r24, r24
    15ac:	99 0b       	sbc	r25, r25
    15ae:	af d7       	rcall	.+3934   	; 0x250e <__floatsisf>
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	48 ec       	ldi	r20, 0xC8	; 200
    15b6:	52 e4       	ldi	r21, 0x42	; 66
    15b8:	3d d7       	rcall	.+3706   	; 0x2434 <__divsf3>
    15ba:	f8 01       	movw	r30, r16
    15bc:	60 83       	st	Z, r22
    15be:	71 83       	std	Z+1, r23	; 0x01
    15c0:	82 83       	std	Z+2, r24	; 0x02
    15c2:	93 83       	std	Z+3, r25	; 0x03
    xyz[1] = ((double)y) / 100.0;
    15c4:	b6 01       	movw	r22, r12
    15c6:	dd 0c       	add	r13, r13
    15c8:	88 0b       	sbc	r24, r24
    15ca:	99 0b       	sbc	r25, r25
    15cc:	a0 d7       	rcall	.+3904   	; 0x250e <__floatsisf>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	48 ec       	ldi	r20, 0xC8	; 200
    15d4:	52 e4       	ldi	r21, 0x42	; 66
    15d6:	2e d7       	rcall	.+3676   	; 0x2434 <__divsf3>
    15d8:	f8 01       	movw	r30, r16
    15da:	64 83       	std	Z+4, r22	; 0x04
    15dc:	75 83       	std	Z+5, r23	; 0x05
    15de:	86 83       	std	Z+6, r24	; 0x06
    15e0:	97 83       	std	Z+7, r25	; 0x07
    xyz[2] = ((double)z) / 100.0;
    15e2:	b7 01       	movw	r22, r14
    15e4:	ff 0c       	add	r15, r15
    15e6:	88 0b       	sbc	r24, r24
    15e8:	99 0b       	sbc	r25, r25
    15ea:	91 d7       	rcall	.+3874   	; 0x250e <__floatsisf>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	48 ec       	ldi	r20, 0xC8	; 200
    15f2:	52 e4       	ldi	r21, 0x42	; 66
    15f4:	1f d7       	rcall	.+3646   	; 0x2434 <__divsf3>
    15f6:	f8 01       	movw	r30, r16
    15f8:	60 87       	std	Z+8, r22	; 0x08
    15fa:	71 87       	std	Z+9, r23	; 0x09
    15fc:	82 87       	std	Z+10, r24	; 0x0a
    15fe:	93 87       	std	Z+11, r25	; 0x0b
    1600:	c8 01       	movw	r24, r16
    break;
  }

  return xyz;
}
    1602:	26 96       	adiw	r28, 0x06	; 6
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	08 95       	ret

00001622 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
    1622:	ef 92       	push	r14
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *          Event description
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	2c 97       	sbiw	r28, 0x0c	; 12
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	7c 01       	movw	r14, r24
    1640:	8b 01       	movw	r16, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
    1642:	84 e2       	ldi	r24, 0x24	; 36
    1644:	fb 01       	movw	r30, r22
    1646:	11 92       	st	Z+, r1
    1648:	8a 95       	dec	r24
    164a:	e9 f7       	brne	.-6      	; 0x1646 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t+0x24>

  event->version = sizeof(sensors_event_t);
    164c:	84 e2       	ldi	r24, 0x24	; 36
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a0 e0       	ldi	r26, 0x00	; 0
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	fb 01       	movw	r30, r22
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	a2 83       	std	Z+2, r26	; 0x02
    165c:	b3 83       	std	Z+3, r27	; 0x03
  event->sensor_id = _sensorID;
    165e:	f7 01       	movw	r30, r14
    1660:	84 81       	ldd	r24, Z+4	; 0x04
    1662:	95 81       	ldd	r25, Z+5	; 0x05
    1664:	a6 81       	ldd	r26, Z+6	; 0x06
    1666:	b7 81       	ldd	r27, Z+7	; 0x07
    1668:	fb 01       	movw	r30, r22
    166a:	84 83       	std	Z+4, r24	; 0x04
    166c:	95 83       	std	Z+5, r25	; 0x05
    166e:	a6 83       	std	Z+6, r26	; 0x06
    1670:	b7 83       	std	Z+7, r27	; 0x07
  event->type = SENSOR_TYPE_ORIENTATION;
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e0       	ldi	r26, 0x00	; 0
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	80 87       	std	Z+8, r24	; 0x08
    167c:	91 87       	std	Z+9, r25	; 0x09
    167e:	a2 87       	std	Z+10, r26	; 0x0a
    1680:	b3 87       	std	Z+11, r27	; 0x0b
  event->timestamp = millis();
    1682:	6a db       	rcall	.-2348   	; 0xd58 <millis>
    1684:	f8 01       	movw	r30, r16
    1686:	60 8b       	std	Z+16, r22	; 0x10
    1688:	71 8b       	std	Z+17, r23	; 0x11
    168a:	82 8b       	std	Z+18, r24	; 0x12
    168c:	93 8b       	std	Z+19, r25	; 0x13

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
    168e:	4a e1       	ldi	r20, 0x1A	; 26
    1690:	b7 01       	movw	r22, r14
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	22 df       	rcall	.-444    	; 0x14dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	ab 81       	ldd	r26, Y+3	; 0x03
    169e:	bc 81       	ldd	r27, Y+4	; 0x04
    16a0:	f8 01       	movw	r30, r16
    16a2:	84 8b       	std	Z+20, r24	; 0x14
    16a4:	95 8b       	std	Z+21, r25	; 0x15
    16a6:	a6 8b       	std	Z+22, r26	; 0x16
    16a8:	b7 8b       	std	Z+23, r27	; 0x17
  event->orientation.y = euler.y();
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	af 81       	ldd	r26, Y+7	; 0x07
    16b0:	b8 85       	ldd	r27, Y+8	; 0x08
    16b2:	80 8f       	std	Z+24, r24	; 0x18
    16b4:	91 8f       	std	Z+25, r25	; 0x19
    16b6:	a2 8f       	std	Z+26, r26	; 0x1a
    16b8:	b3 8f       	std	Z+27, r27	; 0x1b
  event->orientation.z = euler.z();
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	ab 85       	ldd	r26, Y+11	; 0x0b
    16c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    16c2:	84 8f       	std	Z+28, r24	; 0x1c
    16c4:	95 8f       	std	Z+29, r25	; 0x1d
    16c6:	a6 8f       	std	Z+30, r26	; 0x1e
    16c8:	b7 8f       	std	Z+31, r27	; 0x1f

  return true;
}
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	2c 96       	adiw	r28, 0x0c	; 12
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	08 95       	ret

000016e6 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
      (defined(ARDUINO_ARCH_AVR) && !defined(WIRE_HAS_END)) ||                 \
      defined(ARDUINO_ARCH_ESP32))
  _wire->end();
  _begun = false;
#endif
}
    16e6:	fc 01       	movw	r30, r24
    16e8:	60 83       	st	Z, r22
    16ea:	52 83       	std	Z+2, r21	; 0x02
    16ec:	41 83       	std	Z+1, r20	; 0x01
    16ee:	13 82       	std	Z+3, r1	; 0x03
    16f0:	80 e2       	ldi	r24, 0x20	; 32
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	95 83       	std	Z+5, r25	; 0x05
    16f6:	84 83       	std	Z+4, r24	; 0x04
    16f8:	08 95       	ret

000016fa <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	81 11       	cpse	r24, r1
    1704:	06 c0       	rjmp	.+12     	; 0x1712 <_ZN18Adafruit_I2CDevice8detectedEv+0x18>
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	ce 01       	movw	r24, r28
    170a:	11 d0       	rcall	.+34     	; 0x172e <_ZN18Adafruit_I2CDevice5beginEb>
    170c:	98 2f       	mov	r25, r24
    170e:	88 23       	and	r24, r24
    1710:	51 f0       	breq	.+20     	; 0x1726 <_ZN18Adafruit_I2CDevice8detectedEv+0x2c>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    1712:	68 81       	ld	r22, Y
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	f2 d1       	rcall	.+996    	; 0x1afe <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.print(F("Address 0x"));
  DEBUG_SERIAL.print(_addr);
#endif
  if (_wire->endTransmission() == 0) {
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	6b d2       	rcall	.+1238   	; 0x1bf6 <_ZN7TwoWire15endTransmissionEv>
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	81 11       	cpse	r24, r1
    1724:	90 e0       	ldi	r25, 0x00	; 0
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
    1726:	89 2f       	mov	r24, r25
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <_ZN18Adafruit_I2CDevice5beginEb>:
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind, but once in a while they
 * don't respond well to a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
    1736:	16 2f       	mov	r17, r22
  _wire->begin();
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	d1 d1       	rcall	.+930    	; 0x1ae0 <_ZN7TwoWire5beginEv>
  _begun = true;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	8b 83       	std	Y+3, r24	; 0x03

  if (addr_detect) {
    1742:	11 23       	and	r17, r17
    1744:	29 f0       	breq	.+10     	; 0x1750 <_ZN18Adafruit_I2CDevice5beginEb+0x22>
    return detected();
    1746:	ce 01       	movw	r24, r28
  }
  return true;
}
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;

  if (addr_detect) {
    return detected();
    174c:	1f 91       	pop	r17
    174e:	d5 cf       	rjmp	.-86     	; 0x16fa <_ZN18Adafruit_I2CDevice8detectedEv>
  }
  return true;
}
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	08 95       	ret

0000175a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    175a:	8f 92       	push	r8
    175c:	9f 92       	push	r9
    175e:	bf 92       	push	r11
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
  if ((len + prefix_len) > maxBufferSize()) {
    1770:	da 01       	movw	r26, r20
    1772:	ae 0d       	add	r26, r14
    1774:	bf 1d       	adc	r27, r15
    1776:	ec 01       	movw	r28, r24
    1778:	ec 81       	ldd	r30, Y+4	; 0x04
    177a:	fd 81       	ldd	r31, Y+5	; 0x05
    177c:	ea 17       	cp	r30, r26
    177e:	fb 07       	cpc	r31, r27
    1780:	90 f1       	brcs	.+100    	; 0x17e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x8c>
    1782:	b2 2e       	mov	r11, r18
    1784:	6a 01       	movw	r12, r20
    1786:	4b 01       	movw	r8, r22
    1788:	ec 01       	movw	r28, r24
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    178a:	68 81       	ld	r22, Y
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	b6 d1       	rcall	.+876    	; 0x1afe <_ZN7TwoWire17beginTransmissionEh>

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    1792:	e1 14       	cp	r14, r1
    1794:	f1 04       	cpc	r15, r1
    1796:	79 f4       	brne	.+30     	; 0x17b6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x5c>
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	dc 01       	movw	r26, r24
    179e:	ed 91       	ld	r30, X+
    17a0:	fc 91       	ld	r31, X
    17a2:	02 80       	ldd	r0, Z+2	; 0x02
    17a4:	f3 81       	ldd	r31, Z+3	; 0x03
    17a6:	e0 2d       	mov	r30, r0
    17a8:	a6 01       	movw	r20, r12
    17aa:	b4 01       	movw	r22, r8
    17ac:	19 95       	eicall
    17ae:	c8 16       	cp	r12, r24
    17b0:	d9 06       	cpc	r13, r25
    17b2:	c9 f4       	brne	.+50     	; 0x17e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x8c>
    17b4:	12 c0       	rjmp	.+36     	; 0x17da <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x80>
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    17b6:	01 15       	cp	r16, r1
    17b8:	11 05       	cpc	r17, r1
    17ba:	71 f3       	breq	.-36     	; 0x1798 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x3e>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	dc 01       	movw	r26, r24
    17c2:	ed 91       	ld	r30, X+
    17c4:	fc 91       	ld	r31, X
    17c6:	02 80       	ldd	r0, Z+2	; 0x02
    17c8:	f3 81       	ldd	r31, Z+3	; 0x03
    17ca:	e0 2d       	mov	r30, r0
    17cc:	a7 01       	movw	r20, r14
    17ce:	b8 01       	movw	r22, r16
    17d0:	19 95       	eicall
    17d2:	e8 16       	cp	r14, r24
    17d4:	f9 06       	cpc	r15, r25
    17d6:	39 f4       	brne	.+14     	; 0x17e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x8c>
    17d8:	df cf       	rjmp	.-66     	; 0x1798 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x3e>
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    17da:	6b 2d       	mov	r22, r11
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	98 d1       	rcall	.+816    	; 0x1b12 <_ZN7TwoWire15endTransmissionEh>
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	81 11       	cpse	r24, r1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    17e8:	89 2f       	mov	r24, r25
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	df 90       	pop	r13
    17f8:	cf 90       	pop	r12
    17fa:	bf 90       	pop	r11
    17fc:	9f 90       	pop	r9
    17fe:	8f 90       	pop	r8
    1800:	08 95       	ret

00001802 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    1802:	cf 92       	push	r12
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	7c 01       	movw	r14, r24
    1814:	6b 01       	movw	r12, r22
    1816:	8a 01       	movw	r16, r20
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1818:	dc 01       	movw	r26, r24
    181a:	6c 91       	ld	r22, X
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	8d 91       	ld	r24, X+
    1820:	9c 91       	ld	r25, X
    1822:	12 97       	sbiw	r26, 0x02	; 2
    1824:	d9 d1       	rcall	.+946    	; 0x1bd8 <_ZN7TwoWire11requestFromEhhh>
#endif

  if (recv != len) {
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	08 17       	cp	r16, r24
    182a:	19 07       	cpc	r17, r25
    182c:	91 f4       	brne	.+36     	; 0x1852 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x50>
    182e:	e6 01       	movw	r28, r12
    1830:	0c 0d       	add	r16, r12
    1832:	1d 1d       	adc	r17, r13
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    1834:	c0 17       	cp	r28, r16
    1836:	d1 07       	cpc	r29, r17
    1838:	71 f0       	breq	.+28     	; 0x1856 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x54>
    buffer[i] = _wire->read();
    183a:	f7 01       	movw	r30, r14
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	92 81       	ldd	r25, Z+2	; 0x02
    1840:	dc 01       	movw	r26, r24
    1842:	ed 91       	ld	r30, X+
    1844:	fc 91       	ld	r31, X
    1846:	02 84       	ldd	r0, Z+10	; 0x0a
    1848:	f3 85       	ldd	r31, Z+11	; 0x0b
    184a:	e0 2d       	mov	r30, r0
    184c:	19 95       	eicall
    184e:	89 93       	st	Y+, r24
    1850:	f1 cf       	rjmp	.-30     	; 0x1834 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x32>
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    DEBUG_SERIAL.println(recv);
#endif
    return false;
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x56>
  }

  for (uint16_t i = 0; i < len; i++) {
    1856:	81 e0       	ldi	r24, 0x01	; 1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
    1868:	08 95       	ret

0000186a <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    186a:	9f 92       	push	r9
    186c:	af 92       	push	r10
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	6c 01       	movw	r12, r24
    1882:	5b 01       	movw	r10, r22
    1884:	7a 01       	movw	r14, r20
    1886:	92 2e       	mov	r9, r18
  size_t pos = 0;
    1888:	c0 e0       	ldi	r28, 0x00	; 0
    188a:	d0 e0       	ldi	r29, 0x00	; 0
  while (pos < len) {
    188c:	ce 15       	cp	r28, r14
    188e:	df 05       	cpc	r29, r15
    1890:	f0 f4       	brcc	.+60     	; 0x18ce <_ZN18Adafruit_I2CDevice4readEPhjb+0x64>
    1892:	f6 01       	movw	r30, r12
    1894:	84 81       	ldd	r24, Z+4	; 0x04
    1896:	95 81       	ldd	r25, Z+5	; 0x05
    1898:	87 01       	movw	r16, r14
    189a:	0c 1b       	sub	r16, r28
    189c:	1d 0b       	sbc	r17, r29
    189e:	80 17       	cp	r24, r16
    18a0:	91 07       	cpc	r25, r17
    18a2:	08 f4       	brcc	.+2      	; 0x18a6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
    18a4:	8c 01       	movw	r16, r24
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    18a6:	c7 01       	movw	r24, r14
    18a8:	80 1b       	sub	r24, r16
    18aa:	91 0b       	sbc	r25, r17
    18ac:	c8 17       	cp	r28, r24
    18ae:	d9 07       	cpc	r29, r25
    18b0:	10 f0       	brcs	.+4      	; 0x18b6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4c>
    18b2:	29 2d       	mov	r18, r9
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x4e>
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    if (!_read(buffer + pos, read_len, read_stop))
    18b8:	a8 01       	movw	r20, r16
    18ba:	b5 01       	movw	r22, r10
    18bc:	6c 0f       	add	r22, r28
    18be:	7d 1f       	adc	r23, r29
    18c0:	c6 01       	movw	r24, r12
    18c2:	9f df       	rcall	.-194    	; 0x1802 <_ZN18Adafruit_I2CDevice5_readEPhjb>
    18c4:	88 23       	and	r24, r24
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <_ZN18Adafruit_I2CDevice4readEPhjb+0x66>
      return false;
    pos += read_len;
    18c8:	c0 0f       	add	r28, r16
    18ca:	d1 1f       	adc	r29, r17
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    18cc:	df cf       	rjmp	.-66     	; 0x188c <_ZN18Adafruit_I2CDevice4readEPhjb+0x22>
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
}
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	df 90       	pop	r13
    18de:	cf 90       	pop	r12
    18e0:	bf 90       	pop	r11
    18e2:	af 90       	pop	r10
    18e4:	9f 90       	pop	r9
    18e6:	08 95       	ret

000018e8 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    18e8:	af 92       	push	r10
    18ea:	bf 92       	push	r11
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	69 01       	movw	r12, r18
    1900:	58 01       	movw	r10, r16
    1902:	2e 2d       	mov	r18, r14
  if (!write(write_buffer, write_len, stop)) {
    1904:	e1 2c       	mov	r14, r1
    1906:	f1 2c       	mov	r15, r1
    1908:	00 e0       	ldi	r16, 0x00	; 0
    190a:	10 e0       	ldi	r17, 0x00	; 0
    190c:	26 df       	rcall	.-436    	; 0x175a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
    190e:	88 23       	and	r24, r24
    1910:	79 f0       	breq	.+30     	; 0x1930 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x48>
    return false;
  }

  return read(read_buffer, read_len);
    1912:	21 e0       	ldi	r18, 0x01	; 1
    1914:	a5 01       	movw	r20, r10
    1916:	b6 01       	movw	r22, r12
    1918:	ce 01       	movw	r24, r28
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	bf 90       	pop	r11
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
    192c:	af 90       	pop	r10
    192e:	9d cf       	rjmp	.-198    	; 0x186a <_ZN18Adafruit_I2CDevice4readEPhjb>
}
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	af 90       	pop	r10
    1946:	08 95       	ret

00001948 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1948:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <_ZN7TwoWire14rxBufferLengthE>
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    1952:	82 1b       	sub	r24, r18
    1954:	91 09       	sbc	r25, r1
    1956:	08 95       	ret

00001958 <_ZN7TwoWire4readEv>:
    1958:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    195c:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <_ZN7TwoWire14rxBufferLengthE>
    1960:	98 17       	cp	r25, r24
    1962:	50 f4       	brcc	.+20     	; 0x1978 <_ZN7TwoWire4readEv+0x20>
    1964:	e9 2f       	mov	r30, r25
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	ef 54       	subi	r30, 0x4F	; 79
    196a:	fc 4f       	sbci	r31, 0xFC	; 252
    196c:	20 81       	ld	r18, Z
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	9f 5f       	subi	r25, 0xFF	; 255
    1972:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    1976:	02 c0       	rjmp	.+4      	; 0x197c <_ZN7TwoWire4readEv+0x24>
    1978:	2f ef       	ldi	r18, 0xFF	; 255
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	c9 01       	movw	r24, r18
    197e:	08 95       	ret

00001980 <_ZN7TwoWire4peekEv>:
    1980:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    1984:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <_ZN7TwoWire14rxBufferLengthE>
    1988:	e8 17       	cp	r30, r24
    198a:	30 f4       	brcc	.+12     	; 0x1998 <_ZN7TwoWire4peekEv+0x18>
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	ef 54       	subi	r30, 0x4F	; 79
    1990:	fc 4f       	sbci	r31, 0xFC	; 252
    1992:	80 81       	ld	r24, Z
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	08 95       	ret
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	9f ef       	ldi	r25, 0xFF	; 255
    199c:	08 95       	ret

0000199e <_ZN7TwoWire5flushEv>:
    199e:	08 95       	ret

000019a0 <_ZN7TwoWire16onReceiveServiceEPhi>:
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
    19a6:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <_ZN7TwoWire14user_onReceiveE>
    19aa:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <_ZN7TwoWire14user_onReceiveE+0x1>
    19ae:	30 97       	sbiw	r30, 0x00	; 0
    19b0:	f1 f0       	breq	.+60     	; 0x19ee <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    19b2:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    19b6:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <_ZN7TwoWire14rxBufferLengthE>
    19ba:	98 17       	cp	r25, r24
    19bc:	c0 f0       	brcs	.+48     	; 0x19ee <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	29 2f       	mov	r18, r25
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	26 17       	cp	r18, r22
    19c6:	37 07       	cpc	r19, r23
    19c8:	54 f4       	brge	.+20     	; 0x19de <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    19ca:	de 01       	movw	r26, r28
    19cc:	a2 0f       	add	r26, r18
    19ce:	b3 1f       	adc	r27, r19
    19d0:	4c 91       	ld	r20, X
    19d2:	d9 01       	movw	r26, r18
    19d4:	af 54       	subi	r26, 0x4F	; 79
    19d6:	bc 4f       	sbci	r27, 0xFC	; 252
    19d8:	4c 93       	st	X, r20
    19da:	9f 5f       	subi	r25, 0xFF	; 255
    19dc:	f1 cf       	rjmp	.-30     	; 0x19c0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    19de:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    19e2:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <_ZN7TwoWire14rxBufferLengthE>
    19e6:	cb 01       	movw	r24, r22
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	19 94       	eijmp
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <_ZN7TwoWire16onRequestServiceEv>:
    19f4:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <_ZN7TwoWire14user_onRequestE>
    19f8:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <_ZN7TwoWire14user_onRequestE+0x1>
    19fc:	30 97       	sbiw	r30, 0x00	; 0
    19fe:	29 f0       	breq	.+10     	; 0x1a0a <_ZN7TwoWire16onRequestServiceEv+0x16>
    1a00:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <_ZN7TwoWire13txBufferIndexE>
    1a04:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZN7TwoWire14txBufferLengthE>
    1a08:	19 94       	eijmp
    1a0a:	08 95       	ret

00001a0c <_ZN7TwoWire5writeEPKhj>:
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	7c 01       	movw	r14, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8a 01       	movw	r16, r20
    1a22:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <_ZN7TwoWire12transmittingE>
    1a26:	22 23       	and	r18, r18
    1a28:	89 f0       	breq	.+34     	; 0x1a4c <_ZN7TwoWire5writeEPKhj+0x40>
    1a2a:	eb 01       	movw	r28, r22
    1a2c:	6b 01       	movw	r12, r22
    1a2e:	c4 0e       	add	r12, r20
    1a30:	d5 1e       	adc	r13, r21
    1a32:	cc 15       	cp	r28, r12
    1a34:	dd 05       	cpc	r29, r13
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <_ZN7TwoWire5writeEPKhj+0x44>
    1a38:	69 91       	ld	r22, Y+
    1a3a:	d7 01       	movw	r26, r14
    1a3c:	ed 91       	ld	r30, X+
    1a3e:	fc 91       	ld	r31, X
    1a40:	01 90       	ld	r0, Z+
    1a42:	f0 81       	ld	r31, Z
    1a44:	e0 2d       	mov	r30, r0
    1a46:	c7 01       	movw	r24, r14
    1a48:	19 95       	eicall
    1a4a:	f3 cf       	rjmp	.-26     	; 0x1a32 <_ZN7TwoWire5writeEPKhj+0x26>
    1a4c:	64 2f       	mov	r22, r20
    1a4e:	02 d1       	rcall	.+516    	; 0x1c54 <twi_transmit>
    1a50:	c8 01       	movw	r24, r16
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	08 95       	ret

00001a64 <_ZN7TwoWire5writeEh>:
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	1f 92       	push	r1
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	69 83       	std	Y+1, r22	; 0x01
    1a70:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <_ZN7TwoWire12transmittingE>
    1a74:	22 23       	and	r18, r18
    1a76:	d1 f0       	breq	.+52     	; 0x1aac <_ZN7TwoWire5writeEh+0x48>
    1a78:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <_ZN7TwoWire14txBufferLengthE>
    1a7c:	20 32       	cpi	r18, 0x20	; 32
    1a7e:	40 f0       	brcs	.+16     	; 0x1a90 <_ZN7TwoWire5writeEh+0x2c>
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	fc 01       	movw	r30, r24
    1a86:	33 83       	std	Z+3, r19	; 0x03
    1a88:	22 83       	std	Z+2, r18	; 0x02
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <_ZN7TwoWire5writeEh+0x54>
    1a90:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZN7TwoWire13txBufferIndexE>
    1a94:	e8 2f       	mov	r30, r24
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	e2 57       	subi	r30, 0x72	; 114
    1a9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a9c:	99 81       	ldd	r25, Y+1	; 0x01
    1a9e:	90 83       	st	Z, r25
    1aa0:	8f 5f       	subi	r24, 0xFF	; 255
    1aa2:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <_ZN7TwoWire13txBufferIndexE>
    1aa6:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <_ZN7TwoWire14txBufferLengthE>
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <_ZN7TwoWire5writeEh+0x50>
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	ce 01       	movw	r24, r28
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	d0 d0       	rcall	.+416    	; 0x1c54 <twi_transmit>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0f 90       	pop	r0
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <_ZN7TwoWireC1Ev>:
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	13 82       	std	Z+3, r1	; 0x03
    1ac4:	12 82       	std	Z+2, r1	; 0x02
    1ac6:	88 ee       	ldi	r24, 0xE8	; 232
    1ac8:	93 e0       	ldi	r25, 0x03	; 3
    1aca:	a0 e0       	ldi	r26, 0x00	; 0
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	84 83       	std	Z+4, r24	; 0x04
    1ad0:	95 83       	std	Z+5, r25	; 0x05
    1ad2:	a6 83       	std	Z+6, r26	; 0x06
    1ad4:	b7 83       	std	Z+7, r27	; 0x07
    1ad6:	87 eb       	ldi	r24, 0xB7	; 183
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	08 95       	ret

00001ae0 <_ZN7TwoWire5beginEv>:
    1ae0:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    1ae4:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <_ZN7TwoWire14rxBufferLengthE>
    1ae8:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <_ZN7TwoWire13txBufferIndexE>
    1aec:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZN7TwoWire14txBufferLengthE>
    1af0:	8a d0       	rcall	.+276    	; 0x1c06 <twi_init>
    1af2:	8a ef       	ldi	r24, 0xFA	; 250
    1af4:	9c e0       	ldi	r25, 0x0C	; 12
    1af6:	db d0       	rcall	.+438    	; 0x1cae <twi_attachSlaveTxEvent>
    1af8:	80 ed       	ldi	r24, 0xD0	; 208
    1afa:	9c e0       	ldi	r25, 0x0C	; 12
    1afc:	d3 c0       	rjmp	.+422    	; 0x1ca4 <twi_attachSlaveRxEvent>

00001afe <_ZN7TwoWire17beginTransmissionEh>:
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <_ZN7TwoWire12transmittingE>
    1b04:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <_ZN7TwoWire9txAddressE>
    1b08:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <_ZN7TwoWire13txBufferIndexE>
    1b0c:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZN7TwoWire14txBufferLengthE>
    1b10:	08 95       	ret

00001b12 <_ZN7TwoWire15endTransmissionEh>:
    1b12:	0f 93       	push	r16
    1b14:	06 2f       	mov	r16, r22
    1b16:	21 e0       	ldi	r18, 0x01	; 1
    1b18:	40 91 8c 03 	lds	r20, 0x038C	; 0x80038c <_ZN7TwoWire14txBufferLengthE>
    1b1c:	6e e8       	ldi	r22, 0x8E	; 142
    1b1e:	73 e0       	ldi	r23, 0x03	; 3
    1b20:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <_ZN7TwoWire9txAddressE>
    1b24:	c8 d1       	rcall	.+912    	; 0x1eb6 <twi_writeTo>
    1b26:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <_ZN7TwoWire13txBufferIndexE>
    1b2a:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZN7TwoWire14txBufferLengthE>
    1b2e:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <_ZN7TwoWire12transmittingE>
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <_ZN7TwoWire11requestFromEhhmhh>:
    1b36:	4f 92       	push	r4
    1b38:	5f 92       	push	r5
    1b3a:	6f 92       	push	r6
    1b3c:	7f 92       	push	r7
    1b3e:	af 92       	push	r10
    1b40:	bf 92       	push	r11
    1b42:	cf 92       	push	r12
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	5c 01       	movw	r10, r24
    1b52:	f6 2e       	mov	r15, r22
    1b54:	d4 2f       	mov	r29, r20
    1b56:	28 01       	movw	r4, r16
    1b58:	39 01       	movw	r6, r18
    1b5a:	ee 20       	and	r14, r14
    1b5c:	11 f1       	breq	.+68     	; 0x1ba2 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    1b5e:	cf df       	rcall	.-98     	; 0x1afe <_ZN7TwoWire17beginTransmissionEh>
    1b60:	ce 2d       	mov	r28, r14
    1b62:	c4 30       	cpi	r28, 0x04	; 4
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1b66:	c3 e0       	ldi	r28, 0x03	; 3
    1b68:	c1 50       	subi	r28, 0x01	; 1
    1b6a:	c0 f0       	brcs	.+48     	; 0x1b9c <_ZN7TwoWire11requestFromEhhmhh+0x66>
    1b6c:	28 e0       	ldi	r18, 0x08	; 8
    1b6e:	c2 9f       	mul	r28, r18
    1b70:	c0 01       	movw	r24, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	a3 01       	movw	r20, r6
    1b76:	92 01       	movw	r18, r4
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    1b7a:	56 95       	lsr	r21
    1b7c:	47 95       	ror	r20
    1b7e:	37 95       	ror	r19
    1b80:	27 95       	ror	r18
    1b82:	8a 95       	dec	r24
    1b84:	d2 f7       	brpl	.-12     	; 0x1b7a <_ZN7TwoWire11requestFromEhhmhh+0x44>
    1b86:	ca 01       	movw	r24, r20
    1b88:	b9 01       	movw	r22, r18
    1b8a:	d5 01       	movw	r26, r10
    1b8c:	ed 91       	ld	r30, X+
    1b8e:	fc 91       	ld	r31, X
    1b90:	01 90       	ld	r0, Z+
    1b92:	f0 81       	ld	r31, Z
    1b94:	e0 2d       	mov	r30, r0
    1b96:	c5 01       	movw	r24, r10
    1b98:	19 95       	eicall
    1b9a:	e6 cf       	rjmp	.-52     	; 0x1b68 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	c5 01       	movw	r24, r10
    1ba0:	b8 df       	rcall	.-144    	; 0x1b12 <_ZN7TwoWire15endTransmissionEh>
    1ba2:	4d 2f       	mov	r20, r29
    1ba4:	d1 32       	cpi	r29, 0x21	; 33
    1ba6:	08 f0       	brcs	.+2      	; 0x1baa <_ZN7TwoWire11requestFromEhhmhh+0x74>
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	2c 2d       	mov	r18, r12
    1bac:	61 eb       	ldi	r22, 0xB1	; 177
    1bae:	73 e0       	ldi	r23, 0x03	; 3
    1bb0:	8f 2d       	mov	r24, r15
    1bb2:	9c d0       	rcall	.+312    	; 0x1cec <twi_readFrom>
    1bb4:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <_ZN7TwoWire13rxBufferIndexE>
    1bb8:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <_ZN7TwoWire14rxBufferLengthE>
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	7f 90       	pop	r7
    1bd0:	6f 90       	pop	r6
    1bd2:	5f 90       	pop	r5
    1bd4:	4f 90       	pop	r4
    1bd6:	08 95       	ret

00001bd8 <_ZN7TwoWire11requestFromEhhh>:
    1bd8:	cf 92       	push	r12
    1bda:	ef 92       	push	r14
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	c2 2e       	mov	r12, r18
    1be2:	e1 2c       	mov	r14, r1
    1be4:	00 e0       	ldi	r16, 0x00	; 0
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	98 01       	movw	r18, r16
    1bea:	a5 df       	rcall	.-182    	; 0x1b36 <_ZN7TwoWire11requestFromEhhmhh>
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ef 90       	pop	r14
    1bf2:	cf 90       	pop	r12
    1bf4:	08 95       	ret

00001bf6 <_ZN7TwoWire15endTransmissionEv>:
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	8c cf       	rjmp	.-232    	; 0x1b12 <_ZN7TwoWire15endTransmissionEh>

00001bfa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1bfa:	8b e7       	ldi	r24, 0x7B	; 123
    1bfc:	93 e0       	ldi	r25, 0x03	; 3
    1bfe:	60 cf       	rjmp	.-320    	; 0x1ac0 <_ZN7TwoWireC1Ev>

00001c00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1c00:	08 95       	ret

00001c02 <_Znwj>:
    1c02:	a4 c5       	rjmp	.+2888   	; 0x274c <malloc>

00001c04 <_ZdlPv>:
    1c04:	3b c6       	rjmp	.+3190   	; 0x287c <free>

00001c06 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1c06:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_state>
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <twi_sendStop>
    1c10:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <twi_inRepStart>
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	84 e1       	ldi	r24, 0x14	; 20
    1c18:	c4 da       	rcall	.-2680   	; 0x11a2 <digitalWrite>
    1c1a:	61 e0       	ldi	r22, 0x01	; 1
    1c1c:	85 e1       	ldi	r24, 0x15	; 21
    1c1e:	c1 da       	rcall	.-2686   	; 0x11a2 <digitalWrite>
    1c20:	e9 eb       	ldi	r30, 0xB9	; 185
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8e 7f       	andi	r24, 0xFE	; 254
    1c28:	80 83       	st	Z, r24
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8d 7f       	andi	r24, 0xFD	; 253
    1c2e:	80 83       	st	Z, r24
    1c30:	88 e4       	ldi	r24, 0x48	; 72
    1c32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    1c36:	85 e4       	ldi	r24, 0x45	; 69
    1c38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    1c3c:	08 95       	ret

00001c3e <twi_disable>:
    1c3e:	ec eb       	ldi	r30, 0xBC	; 188
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8a 7b       	andi	r24, 0xBA	; 186
    1c46:	80 83       	st	Z, r24
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	84 e1       	ldi	r24, 0x14	; 20
    1c4c:	aa da       	rcall	.-2732   	; 0x11a2 <digitalWrite>
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	85 e1       	ldi	r24, 0x15	; 21
    1c52:	a7 ca       	rjmp	.-2738   	; 0x11a2 <digitalWrite>

00001c54 <twi_transmit>:
    1c54:	40 91 f3 03 	lds	r20, 0x03F3	; 0x8003f3 <twi_txBufferLength>
    1c58:	26 2f       	mov	r18, r22
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	24 0f       	add	r18, r20
    1c5e:	31 1d       	adc	r19, r1
    1c60:	21 32       	cpi	r18, 0x21	; 33
    1c62:	31 05       	cpc	r19, r1
    1c64:	dc f4       	brge	.+54     	; 0x1c9c <twi_transmit+0x48>
    1c66:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <twi_state>
    1c6a:	24 30       	cpi	r18, 0x04	; 4
    1c6c:	c9 f4       	brne	.+50     	; 0x1ca0 <twi_transmit+0x4c>
    1c6e:	fc 01       	movw	r30, r24
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	86 17       	cp	r24, r22
    1c76:	58 f4       	brcc	.+22     	; 0x1c8e <twi_transmit+0x3a>
    1c78:	30 91 f3 03 	lds	r19, 0x03F3	; 0x8003f3 <twi_txBufferLength>
    1c7c:	21 91       	ld	r18, Z+
    1c7e:	dc 01       	movw	r26, r24
    1c80:	ab 50       	subi	r26, 0x0B	; 11
    1c82:	bc 4f       	sbci	r27, 0xFC	; 252
    1c84:	a3 0f       	add	r26, r19
    1c86:	b1 1d       	adc	r27, r1
    1c88:	2c 93       	st	X, r18
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	f3 cf       	rjmp	.-26     	; 0x1c74 <twi_transmit+0x20>
    1c8e:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <twi_txBufferLength>
    1c92:	68 0f       	add	r22, r24
    1c94:	60 93 f3 03 	sts	0x03F3, r22	; 0x8003f3 <twi_txBufferLength>
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	08 95       	ret
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	08 95       	ret
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	08 95       	ret

00001ca4 <twi_attachSlaveRxEvent>:
    1ca4:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <twi_onSlaveReceive+0x1>
    1ca8:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <twi_onSlaveReceive>
    1cac:	08 95       	ret

00001cae <twi_attachSlaveTxEvent>:
    1cae:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <twi_onSlaveTransmit+0x1>
    1cb2:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <twi_onSlaveTransmit>
    1cb6:	08 95       	ret

00001cb8 <twi_releaseBus>:
    1cb8:	85 ec       	ldi	r24, 0xC5	; 197
    1cba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    1cbe:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_state>
    1cc2:	08 95       	ret

00001cc4 <twi_handleTimeout>:
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
    1cca:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <twi_timed_out_flag>
    1cce:	88 23       	and	r24, r24
    1cd0:	51 f0       	breq	.+20     	; 0x1ce6 <twi_handleTimeout+0x22>
    1cd2:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    1cd6:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    1cda:	b1 df       	rcall	.-158    	; 0x1c3e <twi_disable>
    1cdc:	94 df       	rcall	.-216    	; 0x1c06 <twi_init>
    1cde:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    1ce2:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <twi_readFrom>:
    1cec:	4f 92       	push	r4
    1cee:	5f 92       	push	r5
    1cf0:	6f 92       	push	r6
    1cf2:	7f 92       	push	r7
    1cf4:	8f 92       	push	r8
    1cf6:	9f 92       	push	r9
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	f8 2e       	mov	r15, r24
    1d0e:	16 2f       	mov	r17, r22
    1d10:	07 2f       	mov	r16, r23
    1d12:	c4 2f       	mov	r28, r20
    1d14:	e2 2e       	mov	r14, r18
    1d16:	41 32       	cpi	r20, 0x21	; 33
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <twi_readFrom+0x30>
    1d1a:	ba c0       	rjmp	.+372    	; 0x1e90 <twi_readFrom+0x1a4>
    1d1c:	29 d8       	rcall	.-4014   	; 0xd70 <micros>
    1d1e:	4b 01       	movw	r8, r22
    1d20:	5c 01       	movw	r10, r24
    1d22:	d0 91 44 04 	lds	r29, 0x0444	; 0x800444 <twi_state>
    1d26:	dd 23       	and	r29, r29
    1d28:	21 f1       	breq	.+72     	; 0x1d72 <twi_readFrom+0x86>
    1d2a:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_timeout_us>
    1d2e:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1d32:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1d36:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1d3a:	89 2b       	or	r24, r25
    1d3c:	8a 2b       	or	r24, r26
    1d3e:	8b 2b       	or	r24, r27
    1d40:	81 f3       	breq	.-32     	; 0x1d22 <twi_readFrom+0x36>
    1d42:	16 d8       	rcall	.-4052   	; 0xd70 <micros>
    1d44:	40 90 3d 04 	lds	r4, 0x043D	; 0x80043d <twi_timeout_us>
    1d48:	50 90 3e 04 	lds	r5, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1d4c:	60 90 3f 04 	lds	r6, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1d50:	70 90 40 04 	lds	r7, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	88 19       	sub	r24, r8
    1d5a:	99 09       	sbc	r25, r9
    1d5c:	aa 09       	sbc	r26, r10
    1d5e:	bb 09       	sbc	r27, r11
    1d60:	48 16       	cp	r4, r24
    1d62:	59 06       	cpc	r5, r25
    1d64:	6a 06       	cpc	r6, r26
    1d66:	7b 06       	cpc	r7, r27
    1d68:	e0 f6       	brcc	.-72     	; 0x1d22 <twi_readFrom+0x36>
    1d6a:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_do_reset_on_timeout>
    1d6e:	aa df       	rcall	.-172    	; 0x1cc4 <twi_handleTimeout>
    1d70:	8f c0       	rjmp	.+286    	; 0x1e90 <twi_readFrom+0x1a4>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_state>
    1d78:	e0 92 42 04 	sts	0x0442, r14	; 0x800442 <twi_sendStop>
    1d7c:	9f ef       	ldi	r25, 0xFF	; 255
    1d7e:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <twi_error>
    1d82:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <twi_masterBufferIndex>
    1d86:	9c 0f       	add	r25, r28
    1d88:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <twi_masterBufferLength>
    1d8c:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <twi_slarw>
    1d90:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <twi_slarw>
    1d94:	8f 2d       	mov	r24, r15
    1d96:	88 0f       	add	r24, r24
    1d98:	89 2b       	or	r24, r25
    1d9a:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <twi_slarw>
    1d9e:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_inRepStart>
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	89 f5       	brne	.+98     	; 0x1e08 <twi_readFrom+0x11c>
    1da6:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <twi_inRepStart>
    1daa:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1dae:	6b 01       	movw	r12, r22
    1db0:	7c 01       	movw	r14, r24
    1db2:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_slarw>
    1db6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    1dba:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_timeout_us>
    1dbe:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1dc2:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1dc6:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1dca:	89 2b       	or	r24, r25
    1dcc:	8a 2b       	or	r24, r26
    1dce:	8b 2b       	or	r24, r27
    1dd0:	a9 f0       	breq	.+42     	; 0x1dfc <twi_readFrom+0x110>
    1dd2:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1dd6:	80 90 3d 04 	lds	r8, 0x043D	; 0x80043d <twi_timeout_us>
    1dda:	90 90 3e 04 	lds	r9, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1dde:	a0 90 3f 04 	lds	r10, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1de2:	b0 90 40 04 	lds	r11, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8c 19       	sub	r24, r12
    1dec:	9d 09       	sbc	r25, r13
    1dee:	ae 09       	sbc	r26, r14
    1df0:	bf 09       	sbc	r27, r15
    1df2:	88 16       	cp	r8, r24
    1df4:	99 06       	cpc	r9, r25
    1df6:	aa 06       	cpc	r10, r26
    1df8:	bb 06       	cpc	r11, r27
    1dfa:	90 f1       	brcs	.+100    	; 0x1e60 <twi_readFrom+0x174>
    1dfc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    1e00:	83 fd       	sbrc	r24, 3
    1e02:	d7 cf       	rjmp	.-82     	; 0x1db2 <twi_readFrom+0xc6>
    1e04:	85 ec       	ldi	r24, 0xC5	; 197
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <twi_readFrom+0x11e>
    1e08:	85 ee       	ldi	r24, 0xE5	; 229
    1e0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    1e0e:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1e12:	6b 01       	movw	r12, r22
    1e14:	7c 01       	movw	r14, r24
    1e16:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_state>
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	29 f5       	brne	.+74     	; 0x1e68 <twi_readFrom+0x17c>
    1e1e:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_timeout_us>
    1e22:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1e26:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1e2a:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1e2e:	89 2b       	or	r24, r25
    1e30:	8a 2b       	or	r24, r26
    1e32:	8b 2b       	or	r24, r27
    1e34:	81 f3       	breq	.-32     	; 0x1e16 <twi_readFrom+0x12a>
    1e36:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1e3a:	80 90 3d 04 	lds	r8, 0x043D	; 0x80043d <twi_timeout_us>
    1e3e:	90 90 3e 04 	lds	r9, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1e42:	a0 90 3f 04 	lds	r10, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1e46:	b0 90 40 04 	lds	r11, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8c 19       	sub	r24, r12
    1e50:	9d 09       	sbc	r25, r13
    1e52:	ae 09       	sbc	r26, r14
    1e54:	bf 09       	sbc	r27, r15
    1e56:	88 16       	cp	r8, r24
    1e58:	99 06       	cpc	r9, r25
    1e5a:	aa 06       	cpc	r10, r26
    1e5c:	bb 06       	cpc	r11, r27
    1e5e:	d8 f6       	brcc	.-74     	; 0x1e16 <twi_readFrom+0x12a>
    1e60:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_do_reset_on_timeout>
    1e64:	2f df       	rcall	.-418    	; 0x1cc4 <twi_handleTimeout>
    1e66:	15 c0       	rjmp	.+42     	; 0x1e92 <twi_readFrom+0x1a6>
    1e68:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <twi_masterBufferIndex>
    1e6c:	8c 17       	cp	r24, r28
    1e6e:	10 f4       	brcc	.+4      	; 0x1e74 <twi_readFrom+0x188>
    1e70:	c0 91 16 04 	lds	r28, 0x0416	; 0x800416 <twi_masterBufferIndex>
    1e74:	a7 e1       	ldi	r26, 0x17	; 23
    1e76:	b4 e0       	ldi	r27, 0x04	; 4
    1e78:	91 2f       	mov	r25, r17
    1e7a:	e1 2f       	mov	r30, r17
    1e7c:	f0 2f       	mov	r31, r16
    1e7e:	8e 2f       	mov	r24, r30
    1e80:	89 1b       	sub	r24, r25
    1e82:	8c 17       	cp	r24, r28
    1e84:	18 f4       	brcc	.+6      	; 0x1e8c <twi_readFrom+0x1a0>
    1e86:	8d 91       	ld	r24, X+
    1e88:	81 93       	st	Z+, r24
    1e8a:	f9 cf       	rjmp	.-14     	; 0x1e7e <twi_readFrom+0x192>
    1e8c:	dc 2f       	mov	r29, r28
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <twi_readFrom+0x1a6>
    1e90:	d0 e0       	ldi	r29, 0x00	; 0
    1e92:	8d 2f       	mov	r24, r29
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	bf 90       	pop	r11
    1ea6:	af 90       	pop	r10
    1ea8:	9f 90       	pop	r9
    1eaa:	8f 90       	pop	r8
    1eac:	7f 90       	pop	r7
    1eae:	6f 90       	pop	r6
    1eb0:	5f 90       	pop	r5
    1eb2:	4f 90       	pop	r4
    1eb4:	08 95       	ret

00001eb6 <twi_writeTo>:
    1eb6:	4f 92       	push	r4
    1eb8:	5f 92       	push	r5
    1eba:	6f 92       	push	r6
    1ebc:	7f 92       	push	r7
    1ebe:	8f 92       	push	r8
    1ec0:	9f 92       	push	r9
    1ec2:	af 92       	push	r10
    1ec4:	bf 92       	push	r11
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	41 32       	cpi	r20, 0x21	; 33
    1ed8:	08 f0       	brcs	.+2      	; 0x1edc <twi_writeTo+0x26>
    1eda:	c5 c0       	rjmp	.+394    	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    1edc:	12 2f       	mov	r17, r18
    1ede:	f4 2e       	mov	r15, r20
    1ee0:	d7 2e       	mov	r13, r23
    1ee2:	e6 2e       	mov	r14, r22
    1ee4:	d8 2f       	mov	r29, r24
    1ee6:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1eea:	4b 01       	movw	r8, r22
    1eec:	5c 01       	movw	r10, r24
    1eee:	c0 91 44 04 	lds	r28, 0x0444	; 0x800444 <twi_state>
    1ef2:	cc 23       	and	r28, r28
    1ef4:	11 f1       	breq	.+68     	; 0x1f3a <twi_writeTo+0x84>
    1ef6:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_timeout_us>
    1efa:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1efe:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1f02:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1f06:	89 2b       	or	r24, r25
    1f08:	8a 2b       	or	r24, r26
    1f0a:	8b 2b       	or	r24, r27
    1f0c:	81 f3       	breq	.-32     	; 0x1eee <twi_writeTo+0x38>
    1f0e:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1f12:	40 90 3d 04 	lds	r4, 0x043D	; 0x80043d <twi_timeout_us>
    1f16:	50 90 3e 04 	lds	r5, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1f1a:	60 90 3f 04 	lds	r6, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1f1e:	70 90 40 04 	lds	r7, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	88 19       	sub	r24, r8
    1f28:	99 09       	sbc	r25, r9
    1f2a:	aa 09       	sbc	r26, r10
    1f2c:	bb 09       	sbc	r27, r11
    1f2e:	48 16       	cp	r4, r24
    1f30:	59 06       	cpc	r5, r25
    1f32:	6a 06       	cpc	r6, r26
    1f34:	7b 06       	cpc	r7, r27
    1f36:	d8 f6       	brcc	.-74     	; 0x1eee <twi_writeTo+0x38>
    1f38:	83 c0       	rjmp	.+262    	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_state>
    1f40:	00 93 42 04 	sts	0x0442, r16	; 0x800442 <twi_sendStop>
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <twi_error>
    1f4a:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <twi_masterBufferIndex>
    1f4e:	f0 92 15 04 	sts	0x0415, r15	; 0x800415 <twi_masterBufferLength>
    1f52:	9e 2d       	mov	r25, r14
    1f54:	a7 e1       	ldi	r26, 0x17	; 23
    1f56:	b4 e0       	ldi	r27, 0x04	; 4
    1f58:	ee 2d       	mov	r30, r14
    1f5a:	fd 2d       	mov	r31, r13
    1f5c:	8e 2f       	mov	r24, r30
    1f5e:	89 1b       	sub	r24, r25
    1f60:	8f 15       	cp	r24, r15
    1f62:	18 f4       	brcc	.+6      	; 0x1f6a <twi_writeTo+0xb4>
    1f64:	81 91       	ld	r24, Z+
    1f66:	8d 93       	st	X+, r24
    1f68:	f9 cf       	rjmp	.-14     	; 0x1f5c <twi_writeTo+0xa6>
    1f6a:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <twi_slarw>
    1f6e:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <twi_slarw>
    1f72:	dd 0f       	add	r29, r29
    1f74:	d9 2b       	or	r29, r25
    1f76:	d0 93 43 04 	sts	0x0443, r29	; 0x800443 <twi_slarw>
    1f7a:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_inRepStart>
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	89 f5       	brne	.+98     	; 0x1fe4 <twi_writeTo+0x12e>
    1f82:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <twi_inRepStart>
    1f86:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1f8a:	6b 01       	movw	r12, r22
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_slarw>
    1f92:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    1f96:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_timeout_us>
    1f9a:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1f9e:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1fa2:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1fa6:	89 2b       	or	r24, r25
    1fa8:	8a 2b       	or	r24, r26
    1faa:	8b 2b       	or	r24, r27
    1fac:	a9 f0       	breq	.+42     	; 0x1fd8 <twi_writeTo+0x122>
    1fae:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1fb2:	80 90 3d 04 	lds	r8, 0x043D	; 0x80043d <twi_timeout_us>
    1fb6:	90 90 3e 04 	lds	r9, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    1fba:	a0 90 3f 04 	lds	r10, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    1fbe:	b0 90 40 04 	lds	r11, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8c 19       	sub	r24, r12
    1fc8:	9d 09       	sbc	r25, r13
    1fca:	ae 09       	sbc	r26, r14
    1fcc:	bf 09       	sbc	r27, r15
    1fce:	88 16       	cp	r8, r24
    1fd0:	99 06       	cpc	r9, r25
    1fd2:	aa 06       	cpc	r10, r26
    1fd4:	bb 06       	cpc	r11, r27
    1fd6:	a0 f1       	brcs	.+104    	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    1fd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    1fdc:	83 fd       	sbrc	r24, 3
    1fde:	d7 cf       	rjmp	.-82     	; 0x1f8e <twi_writeTo+0xd8>
    1fe0:	85 ec       	ldi	r24, 0xC5	; 197
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <twi_writeTo+0x130>
    1fe4:	85 ee       	ldi	r24, 0xE5	; 229
    1fe6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    1fea:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    1fee:	6b 01       	movw	r12, r22
    1ff0:	7c 01       	movw	r14, r24
    1ff2:	11 23       	and	r17, r17
    1ff4:	51 f1       	breq	.+84     	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    1ff6:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_state>
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	31 f5       	brne	.+76     	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    1ffe:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_timeout_us>
    2002:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    2006:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    200a:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    200e:	89 2b       	or	r24, r25
    2010:	8a 2b       	or	r24, r26
    2012:	8b 2b       	or	r24, r27
    2014:	71 f3       	breq	.-36     	; 0x1ff2 <twi_writeTo+0x13c>
    2016:	0e 94 b8 06 	call	0xd70	; 0xd70 <micros>
    201a:	80 90 3d 04 	lds	r8, 0x043D	; 0x80043d <twi_timeout_us>
    201e:	90 90 3e 04 	lds	r9, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    2022:	a0 90 3f 04 	lds	r10, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    2026:	b0 90 40 04 	lds	r11, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8c 19       	sub	r24, r12
    2030:	9d 09       	sbc	r25, r13
    2032:	ae 09       	sbc	r26, r14
    2034:	bf 09       	sbc	r27, r15
    2036:	88 16       	cp	r8, r24
    2038:	99 06       	cpc	r9, r25
    203a:	aa 06       	cpc	r10, r26
    203c:	bb 06       	cpc	r11, r27
    203e:	c8 f6       	brcc	.-78     	; 0x1ff2 <twi_writeTo+0x13c>
    2040:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_do_reset_on_timeout>
    2044:	3f de       	rcall	.-898    	; 0x1cc4 <twi_handleTimeout>
    2046:	c5 e0       	ldi	r28, 0x05	; 5
    2048:	13 c0       	rjmp	.+38     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    204a:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <twi_error>
    204e:	8f 3f       	cpi	r24, 0xFF	; 255
    2050:	79 f0       	breq	.+30     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2052:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <twi_error>
    2056:	80 32       	cpi	r24, 0x20	; 32
    2058:	41 f0       	breq	.+16     	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    205a:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <twi_error>
    205e:	80 33       	cpi	r24, 0x30	; 48
    2060:	31 f0       	breq	.+12     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    2062:	c4 e0       	ldi	r28, 0x04	; 4
    2064:	05 c0       	rjmp	.+10     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2066:	c1 e0       	ldi	r28, 0x01	; 1
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    206a:	c2 e0       	ldi	r28, 0x02	; 2
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    206e:	c3 e0       	ldi	r28, 0x03	; 3
    2070:	8c 2f       	mov	r24, r28
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	df 90       	pop	r13
    2080:	cf 90       	pop	r12
    2082:	bf 90       	pop	r11
    2084:	af 90       	pop	r10
    2086:	9f 90       	pop	r9
    2088:	8f 90       	pop	r8
    208a:	7f 90       	pop	r7
    208c:	6f 90       	pop	r6
    208e:	5f 90       	pop	r5
    2090:	4f 90       	pop	r4
    2092:	08 95       	ret

00002094 <twi_stop>:
    2094:	85 ed       	ldi	r24, 0xD5	; 213
    2096:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    209a:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <twi_timeout_us>
    209e:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    20a2:	a0 91 3f 04 	lds	r26, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    20a6:	b0 91 40 04 	lds	r27, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    20aa:	07 96       	adiw	r24, 0x07	; 7
    20ac:	a1 1d       	adc	r26, r1
    20ae:	b1 1d       	adc	r27, r1
    20b0:	23 e0       	ldi	r18, 0x03	; 3
    20b2:	b6 95       	lsr	r27
    20b4:	a7 95       	ror	r26
    20b6:	97 95       	ror	r25
    20b8:	87 95       	ror	r24
    20ba:	2a 95       	dec	r18
    20bc:	d1 f7       	brne	.-12     	; 0x20b2 <twi_stop+0x1e>
    20be:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    20c2:	24 ff       	sbrs	r18, 4
    20c4:	1b c0       	rjmp	.+54     	; 0x20fc <twi_stop+0x68>
    20c6:	40 91 3d 04 	lds	r20, 0x043D	; 0x80043d <twi_timeout_us>
    20ca:	50 91 3e 04 	lds	r21, 0x043E	; 0x80043e <twi_timeout_us+0x1>
    20ce:	60 91 3f 04 	lds	r22, 0x043F	; 0x80043f <twi_timeout_us+0x2>
    20d2:	70 91 40 04 	lds	r23, 0x0440	; 0x800440 <twi_timeout_us+0x3>
    20d6:	45 2b       	or	r20, r21
    20d8:	46 2b       	or	r20, r22
    20da:	47 2b       	or	r20, r23
    20dc:	81 f3       	breq	.-32     	; 0x20be <twi_stop+0x2a>
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	a1 05       	cpc	r26, r1
    20e2:	b1 05       	cpc	r27, r1
    20e4:	41 f0       	breq	.+16     	; 0x20f6 <twi_stop+0x62>
    20e6:	2a e2       	ldi	r18, 0x2A	; 42
    20e8:	2a 95       	dec	r18
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <twi_stop+0x54>
    20ec:	00 c0       	rjmp	.+0      	; 0x20ee <twi_stop+0x5a>
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	a1 09       	sbc	r26, r1
    20f2:	b1 09       	sbc	r27, r1
    20f4:	e4 cf       	rjmp	.-56     	; 0x20be <twi_stop+0x2a>
    20f6:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_do_reset_on_timeout>
    20fa:	e4 cd       	rjmp	.-1080   	; 0x1cc4 <twi_handleTimeout>
    20fc:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_state>
    2100:	08 95       	ret

00002102 <__vector_39>:

ISR(TWI_vect)
{
    2102:	1f 92       	push	r1
    2104:	0f 92       	push	r0
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	0f 92       	push	r0
    210a:	11 24       	eor	r1, r1
    210c:	0b b6       	in	r0, 0x3b	; 59
    210e:	0f 92       	push	r0
    2110:	2f 93       	push	r18
    2112:	3f 93       	push	r19
    2114:	4f 93       	push	r20
    2116:	5f 93       	push	r21
    2118:	6f 93       	push	r22
    211a:	7f 93       	push	r23
    211c:	8f 93       	push	r24
    211e:	9f 93       	push	r25
    2120:	af 93       	push	r26
    2122:	bf 93       	push	r27
    2124:	ef 93       	push	r30
    2126:	ff 93       	push	r31
  switch(TW_STATUS){
    2128:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    212c:	88 7f       	andi	r24, 0xF8	; 248
    212e:	80 36       	cpi	r24, 0x60	; 96
    2130:	09 f4       	brne	.+2      	; 0x2134 <__vector_39+0x32>
    2132:	9d c0       	rjmp	.+314    	; 0x226e <__stack+0x6f>
    2134:	70 f5       	brcc	.+92     	; 0x2192 <__vector_39+0x90>
    2136:	88 32       	cpi	r24, 0x28	; 40
    2138:	09 f4       	brne	.+2      	; 0x213c <__vector_39+0x3a>
    213a:	5c c0       	rjmp	.+184    	; 0x21f4 <__vector_39+0xf2>
    213c:	90 f4       	brcc	.+36     	; 0x2162 <__vector_39+0x60>
    213e:	80 31       	cpi	r24, 0x10	; 16
    2140:	09 f4       	brne	.+2      	; 0x2144 <__vector_39+0x42>
    2142:	55 c0       	rjmp	.+170    	; 0x21ee <__vector_39+0xec>
    2144:	38 f4       	brcc	.+14     	; 0x2154 <__vector_39+0x52>
    2146:	88 23       	and	r24, r24
    2148:	09 f4       	brne	.+2      	; 0x214c <__vector_39+0x4a>
    214a:	f3 c0       	rjmp	.+486    	; 0x2332 <__stack+0x133>
    214c:	88 30       	cpi	r24, 0x08	; 8
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_39+0x50>
    2150:	4e c0       	rjmp	.+156    	; 0x21ee <__vector_39+0xec>
    2152:	f2 c0       	rjmp	.+484    	; 0x2338 <__stack+0x139>
    2154:	88 31       	cpi	r24, 0x18	; 24
    2156:	09 f4       	brne	.+2      	; 0x215a <__vector_39+0x58>
    2158:	4d c0       	rjmp	.+154    	; 0x21f4 <__vector_39+0xf2>
    215a:	80 32       	cpi	r24, 0x20	; 32
    215c:	09 f4       	brne	.+2      	; 0x2160 <__vector_39+0x5e>
    215e:	5e c0       	rjmp	.+188    	; 0x221c <__stack+0x1d>
    2160:	eb c0       	rjmp	.+470    	; 0x2338 <__stack+0x139>
    2162:	80 34       	cpi	r24, 0x40	; 64
    2164:	09 f4       	brne	.+2      	; 0x2168 <__vector_39+0x66>
    2166:	69 c0       	rjmp	.+210    	; 0x223a <__stack+0x3b>
    2168:	50 f4       	brcc	.+20     	; 0x217e <__vector_39+0x7c>
    216a:	80 33       	cpi	r24, 0x30	; 48
    216c:	09 f4       	brne	.+2      	; 0x2170 <__vector_39+0x6e>
    216e:	56 c0       	rjmp	.+172    	; 0x221c <__stack+0x1d>
    2170:	88 33       	cpi	r24, 0x38	; 56
    2172:	09 f0       	breq	.+2      	; 0x2176 <__vector_39+0x74>
    2174:	e1 c0       	rjmp	.+450    	; 0x2338 <__stack+0x139>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2176:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <twi_error>
      twi_releaseBus();
    217a:	9e dd       	rcall	.-1220   	; 0x1cb8 <twi_releaseBus>
      break;
    217c:	dd c0       	rjmp	.+442    	; 0x2338 <__stack+0x139>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    217e:	80 35       	cpi	r24, 0x50	; 80
    2180:	09 f4       	brne	.+2      	; 0x2184 <__vector_39+0x82>
    2182:	4f c0       	rjmp	.+158    	; 0x2222 <__stack+0x23>
    2184:	88 35       	cpi	r24, 0x58	; 88
    2186:	09 f4       	brne	.+2      	; 0x218a <__vector_39+0x88>
    2188:	5d c0       	rjmp	.+186    	; 0x2244 <__stack+0x45>
    218a:	88 34       	cpi	r24, 0x48	; 72
    218c:	09 f0       	breq	.+2      	; 0x2190 <__vector_39+0x8e>
    218e:	d4 c0       	rjmp	.+424    	; 0x2338 <__stack+0x139>
    2190:	d2 c0       	rjmp	.+420    	; 0x2336 <__stack+0x137>
    2192:	88 39       	cpi	r24, 0x98	; 152
    2194:	09 f4       	brne	.+2      	; 0x2198 <__vector_39+0x96>
    2196:	c3 c0       	rjmp	.+390    	; 0x231e <__stack+0x11f>
    2198:	a8 f4       	brcc	.+42     	; 0x21c4 <__vector_39+0xc2>
    219a:	88 37       	cpi	r24, 0x78	; 120
    219c:	09 f4       	brne	.+2      	; 0x21a0 <__vector_39+0x9e>
    219e:	67 c0       	rjmp	.+206    	; 0x226e <__stack+0x6f>
    21a0:	38 f4       	brcc	.+14     	; 0x21b0 <__vector_39+0xae>
    21a2:	88 36       	cpi	r24, 0x68	; 104
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <__vector_39+0xa6>
    21a6:	63 c0       	rjmp	.+198    	; 0x226e <__stack+0x6f>
    21a8:	80 37       	cpi	r24, 0x70	; 112
    21aa:	09 f4       	brne	.+2      	; 0x21ae <__vector_39+0xac>
    21ac:	60 c0       	rjmp	.+192    	; 0x226e <__stack+0x6f>
    21ae:	c4 c0       	rjmp	.+392    	; 0x2338 <__stack+0x139>
    21b0:	88 38       	cpi	r24, 0x88	; 136
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <__vector_39+0xb4>
    21b4:	b4 c0       	rjmp	.+360    	; 0x231e <__stack+0x11f>
    21b6:	80 39       	cpi	r24, 0x90	; 144
    21b8:	09 f4       	brne	.+2      	; 0x21bc <__vector_39+0xba>
    21ba:	5f c0       	rjmp	.+190    	; 0x227a <__stack+0x7b>
    21bc:	80 38       	cpi	r24, 0x80	; 128
    21be:	09 f0       	breq	.+2      	; 0x21c2 <__vector_39+0xc0>
    21c0:	bb c0       	rjmp	.+374    	; 0x2338 <__stack+0x139>
    21c2:	5b c0       	rjmp	.+182    	; 0x227a <__stack+0x7b>
    21c4:	80 3b       	cpi	r24, 0xB0	; 176
    21c6:	09 f4       	brne	.+2      	; 0x21ca <__vector_39+0xc8>
    21c8:	82 c0       	rjmp	.+260    	; 0x22ce <__stack+0xcf>
    21ca:	38 f4       	brcc	.+14     	; 0x21da <__vector_39+0xd8>
    21cc:	80 3a       	cpi	r24, 0xA0	; 160
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__vector_39+0xd0>
    21d0:	66 c0       	rjmp	.+204    	; 0x229e <__stack+0x9f>
    21d2:	88 3a       	cpi	r24, 0xA8	; 168
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <__vector_39+0xd6>
    21d6:	7b c0       	rjmp	.+246    	; 0x22ce <__stack+0xcf>
    21d8:	af c0       	rjmp	.+350    	; 0x2338 <__stack+0x139>
    21da:	80 3c       	cpi	r24, 0xC0	; 192
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <__vector_39+0xde>
    21de:	a3 c0       	rjmp	.+326    	; 0x2326 <__stack+0x127>
    21e0:	88 3c       	cpi	r24, 0xC8	; 200
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <__vector_39+0xe4>
    21e4:	a0 c0       	rjmp	.+320    	; 0x2326 <__stack+0x127>
    21e6:	88 3b       	cpi	r24, 0xB8	; 184
    21e8:	09 f4       	brne	.+2      	; 0x21ec <__vector_39+0xea>
    21ea:	86 c0       	rjmp	.+268    	; 0x22f8 <__stack+0xf9>
    21ec:	a5 c0       	rjmp	.+330    	; 0x2338 <__stack+0x139>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21ee:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_slarw>
    21f2:	10 c0       	rjmp	.+32     	; 0x2214 <__stack+0x15>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21f4:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <twi_masterBufferIndex>
    21f8:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <twi_masterBufferLength>
    21fc:	98 17       	cp	r25, r24
    21fe:	70 f5       	brcc	.+92     	; 0x225c <__stack+0x5d>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2200:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <twi_masterBufferIndex>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	8e 0f       	add	r24, r30
    2208:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <twi_masterBufferIndex>
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	e9 5e       	subi	r30, 0xE9	; 233
    2210:	fb 4f       	sbci	r31, 0xFB	; 251
    2212:	80 81       	ld	r24, Z
    2214:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2218:	85 ec       	ldi	r24, 0xC5	; 197
    221a:	82 c0       	rjmp	.+260    	; 0x2320 <__stack+0x121>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    221c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <twi_error>
    2220:	8a c0       	rjmp	.+276    	; 0x2336 <__stack+0x137>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2222:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <twi_masterBufferIndex>
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	8e 0f       	add	r24, r30
    222a:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <twi_masterBufferIndex>
    222e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	e9 5e       	subi	r30, 0xE9	; 233
    2236:	fb 4f       	sbci	r31, 0xFB	; 251
    2238:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    223a:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <twi_masterBufferIndex>
    223e:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <twi_masterBufferLength>
    2242:	6a c0       	rjmp	.+212    	; 0x2318 <__stack+0x119>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2244:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <twi_masterBufferIndex>
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	8e 0f       	add	r24, r30
    224c:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <twi_masterBufferIndex>
    2250:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	e9 5e       	subi	r30, 0xE9	; 233
    2258:	fb 4f       	sbci	r31, 0xFB	; 251
    225a:	80 83       	st	Z, r24
      if (twi_sendStop){
    225c:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <twi_sendStop>
    2260:	81 11       	cpse	r24, r1
    2262:	69 c0       	rjmp	.+210    	; 0x2336 <__stack+0x137>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    226a:	84 ea       	ldi	r24, 0xA4	; 164
    226c:	5d c0       	rjmp	.+186    	; 0x2328 <__stack+0x129>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2274:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <twi_rxBufferIndex>
    2278:	cf cf       	rjmp	.-98     	; 0x2218 <__stack+0x19>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    227a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_rxBufferIndex>
    227e:	80 32       	cpi	r24, 0x20	; 32
    2280:	08 f0       	brcs	.+2      	; 0x2284 <__stack+0x85>
    2282:	4d c0       	rjmp	.+154    	; 0x231e <__stack+0x11f>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2284:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <twi_rxBufferIndex>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	8e 0f       	add	r24, r30
    228c:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_rxBufferIndex>
    2290:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	ed 52       	subi	r30, 0x2D	; 45
    2298:	fc 4f       	sbci	r31, 0xFC	; 252
    229a:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    229c:	bd cf       	rjmp	.-134    	; 0x2218 <__stack+0x19>
    229e:	0c dd       	rcall	.-1512   	; 0x1cb8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    22a0:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_rxBufferIndex>
    22a4:	80 32       	cpi	r24, 0x20	; 32
    22a6:	30 f4       	brcc	.+12     	; 0x22b4 <__stack+0xb5>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    22a8:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <twi_rxBufferIndex>
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	ed 52       	subi	r30, 0x2D	; 45
    22b0:	fc 4f       	sbci	r31, 0xFC	; 252
    22b2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22b4:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <twi_rxBufferIndex>
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <twi_onSlaveReceive>
    22be:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <twi_onSlaveReceive+0x1>
    22c2:	83 ed       	ldi	r24, 0xD3	; 211
    22c4:	93 e0       	ldi	r25, 0x03	; 3
    22c6:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22c8:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <twi_rxBufferIndex>
      break;
    22cc:	35 c0       	rjmp	.+106    	; 0x2338 <__stack+0x139>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    22ce:	84 e0       	ldi	r24, 0x04	; 4
    22d0:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    22d4:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    22d8:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22dc:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <twi_onSlaveTransmit>
    22e0:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <twi_onSlaveTransmit+0x1>
    22e4:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22e6:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <twi_txBufferLength>
    22ea:	81 11       	cpse	r24, r1
    22ec:	05 c0       	rjmp	.+10     	; 0x22f8 <__stack+0xf9>
        twi_txBufferLength = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22f4:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22f8:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <twi_txBufferIndex>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	8e 0f       	add	r24, r30
    2300:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <twi_txBufferIndex>
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	eb 50       	subi	r30, 0x0B	; 11
    2308:	fc 4f       	sbci	r31, 0xFC	; 252
    230a:	80 81       	ld	r24, Z
    230c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2310:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <twi_txBufferIndex>
    2314:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <twi_txBufferLength>
    2318:	98 17       	cp	r25, r24
    231a:	08 f4       	brcc	.+2      	; 0x231e <__stack+0x11f>
    231c:	7d cf       	rjmp	.-262    	; 0x2218 <__stack+0x19>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    231e:	85 e8       	ldi	r24, 0x85	; 133
    2320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <__stack+0x139>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2326:	85 ec       	ldi	r24, 0xC5	; 197
    2328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    232c:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_state>
      break;
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <__stack+0x139>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2332:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <twi_error>
      twi_stop();
    2336:	ae de       	rcall	.-676    	; 0x2094 <twi_stop>
      break;
  }
}
    2338:	ff 91       	pop	r31
    233a:	ef 91       	pop	r30
    233c:	bf 91       	pop	r27
    233e:	af 91       	pop	r26
    2340:	9f 91       	pop	r25
    2342:	8f 91       	pop	r24
    2344:	7f 91       	pop	r23
    2346:	6f 91       	pop	r22
    2348:	5f 91       	pop	r21
    234a:	4f 91       	pop	r20
    234c:	3f 91       	pop	r19
    234e:	2f 91       	pop	r18
    2350:	0f 90       	pop	r0
    2352:	0b be       	out	0x3b, r0	; 59
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	0f 90       	pop	r0
    235a:	1f 90       	pop	r1
    235c:	18 95       	reti

0000235e <__subsf3>:
    235e:	50 58       	subi	r21, 0x80	; 128

00002360 <__addsf3>:
    2360:	bb 27       	eor	r27, r27
    2362:	aa 27       	eor	r26, r26
    2364:	0e d0       	rcall	.+28     	; 0x2382 <__addsf3x>
    2366:	49 c1       	rjmp	.+658    	; 0x25fa <__fp_round>
    2368:	3a d1       	rcall	.+628    	; 0x25de <__fp_pscA>
    236a:	30 f0       	brcs	.+12     	; 0x2378 <__addsf3+0x18>
    236c:	3f d1       	rcall	.+638    	; 0x25ec <__fp_pscB>
    236e:	20 f0       	brcs	.+8      	; 0x2378 <__addsf3+0x18>
    2370:	31 f4       	brne	.+12     	; 0x237e <__addsf3+0x1e>
    2372:	9f 3f       	cpi	r25, 0xFF	; 255
    2374:	11 f4       	brne	.+4      	; 0x237a <__addsf3+0x1a>
    2376:	1e f4       	brtc	.+6      	; 0x237e <__addsf3+0x1e>
    2378:	2f c1       	rjmp	.+606    	; 0x25d8 <__fp_nan>
    237a:	0e f4       	brtc	.+2      	; 0x237e <__addsf3+0x1e>
    237c:	e0 95       	com	r30
    237e:	e7 fb       	bst	r30, 7
    2380:	25 c1       	rjmp	.+586    	; 0x25cc <__fp_inf>

00002382 <__addsf3x>:
    2382:	e9 2f       	mov	r30, r25
    2384:	0e 94 56 02 	call	0x4ac	; 0x4ac <__fp_split3>
    2388:	78 f3       	brcs	.-34     	; 0x2368 <__addsf3+0x8>
    238a:	ba 17       	cp	r27, r26
    238c:	62 07       	cpc	r22, r18
    238e:	73 07       	cpc	r23, r19
    2390:	84 07       	cpc	r24, r20
    2392:	95 07       	cpc	r25, r21
    2394:	20 f0       	brcs	.+8      	; 0x239e <__addsf3x+0x1c>
    2396:	79 f4       	brne	.+30     	; 0x23b6 <__addsf3x+0x34>
    2398:	a6 f5       	brtc	.+104    	; 0x2402 <__addsf3x+0x80>
    239a:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_zero>
    239e:	0e f4       	brtc	.+2      	; 0x23a2 <__addsf3x+0x20>
    23a0:	e0 95       	com	r30
    23a2:	0b 2e       	mov	r0, r27
    23a4:	ba 2f       	mov	r27, r26
    23a6:	a0 2d       	mov	r26, r0
    23a8:	0b 01       	movw	r0, r22
    23aa:	b9 01       	movw	r22, r18
    23ac:	90 01       	movw	r18, r0
    23ae:	0c 01       	movw	r0, r24
    23b0:	ca 01       	movw	r24, r20
    23b2:	a0 01       	movw	r20, r0
    23b4:	11 24       	eor	r1, r1
    23b6:	ff 27       	eor	r31, r31
    23b8:	59 1b       	sub	r21, r25
    23ba:	99 f0       	breq	.+38     	; 0x23e2 <__addsf3x+0x60>
    23bc:	59 3f       	cpi	r21, 0xF9	; 249
    23be:	50 f4       	brcc	.+20     	; 0x23d4 <__addsf3x+0x52>
    23c0:	50 3e       	cpi	r21, 0xE0	; 224
    23c2:	68 f1       	brcs	.+90     	; 0x241e <__addsf3x+0x9c>
    23c4:	1a 16       	cp	r1, r26
    23c6:	f0 40       	sbci	r31, 0x00	; 0
    23c8:	a2 2f       	mov	r26, r18
    23ca:	23 2f       	mov	r18, r19
    23cc:	34 2f       	mov	r19, r20
    23ce:	44 27       	eor	r20, r20
    23d0:	58 5f       	subi	r21, 0xF8	; 248
    23d2:	f3 cf       	rjmp	.-26     	; 0x23ba <__addsf3x+0x38>
    23d4:	46 95       	lsr	r20
    23d6:	37 95       	ror	r19
    23d8:	27 95       	ror	r18
    23da:	a7 95       	ror	r26
    23dc:	f0 40       	sbci	r31, 0x00	; 0
    23de:	53 95       	inc	r21
    23e0:	c9 f7       	brne	.-14     	; 0x23d4 <__addsf3x+0x52>
    23e2:	7e f4       	brtc	.+30     	; 0x2402 <__addsf3x+0x80>
    23e4:	1f 16       	cp	r1, r31
    23e6:	ba 0b       	sbc	r27, r26
    23e8:	62 0b       	sbc	r22, r18
    23ea:	73 0b       	sbc	r23, r19
    23ec:	84 0b       	sbc	r24, r20
    23ee:	ba f0       	brmi	.+46     	; 0x241e <__addsf3x+0x9c>
    23f0:	91 50       	subi	r25, 0x01	; 1
    23f2:	a1 f0       	breq	.+40     	; 0x241c <__addsf3x+0x9a>
    23f4:	ff 0f       	add	r31, r31
    23f6:	bb 1f       	adc	r27, r27
    23f8:	66 1f       	adc	r22, r22
    23fa:	77 1f       	adc	r23, r23
    23fc:	88 1f       	adc	r24, r24
    23fe:	c2 f7       	brpl	.-16     	; 0x23f0 <__addsf3x+0x6e>
    2400:	0e c0       	rjmp	.+28     	; 0x241e <__addsf3x+0x9c>
    2402:	ba 0f       	add	r27, r26
    2404:	62 1f       	adc	r22, r18
    2406:	73 1f       	adc	r23, r19
    2408:	84 1f       	adc	r24, r20
    240a:	48 f4       	brcc	.+18     	; 0x241e <__addsf3x+0x9c>
    240c:	87 95       	ror	r24
    240e:	77 95       	ror	r23
    2410:	67 95       	ror	r22
    2412:	b7 95       	ror	r27
    2414:	f7 95       	ror	r31
    2416:	9e 3f       	cpi	r25, 0xFE	; 254
    2418:	08 f0       	brcs	.+2      	; 0x241c <__addsf3x+0x9a>
    241a:	b1 cf       	rjmp	.-158    	; 0x237e <__addsf3+0x1e>
    241c:	93 95       	inc	r25
    241e:	88 0f       	add	r24, r24
    2420:	08 f0       	brcs	.+2      	; 0x2424 <__addsf3x+0xa2>
    2422:	99 27       	eor	r25, r25
    2424:	ee 0f       	add	r30, r30
    2426:	97 95       	ror	r25
    2428:	87 95       	ror	r24
    242a:	08 95       	ret

0000242c <__cmpsf2>:
    242c:	ab d0       	rcall	.+342    	; 0x2584 <__fp_cmp>
    242e:	08 f4       	brcc	.+2      	; 0x2432 <__cmpsf2+0x6>
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	08 95       	ret

00002434 <__divsf3>:
    2434:	0d d0       	rcall	.+26     	; 0x2450 <__divsf3x>
    2436:	e1 c0       	rjmp	.+450    	; 0x25fa <__fp_round>
    2438:	d9 d0       	rcall	.+434    	; 0x25ec <__fp_pscB>
    243a:	48 f0       	brcs	.+18     	; 0x244e <__divsf3+0x1a>
    243c:	d0 d0       	rcall	.+416    	; 0x25de <__fp_pscA>
    243e:	38 f0       	brcs	.+14     	; 0x244e <__divsf3+0x1a>
    2440:	21 f4       	brne	.+8      	; 0x244a <__divsf3+0x16>
    2442:	5f 3f       	cpi	r21, 0xFF	; 255
    2444:	21 f0       	breq	.+8      	; 0x244e <__divsf3+0x1a>
    2446:	c2 c0       	rjmp	.+388    	; 0x25cc <__fp_inf>
    2448:	51 11       	cpse	r21, r1
    244a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_szero>
    244e:	c4 c0       	rjmp	.+392    	; 0x25d8 <__fp_nan>

00002450 <__divsf3x>:
    2450:	0e 94 56 02 	call	0x4ac	; 0x4ac <__fp_split3>
    2454:	88 f3       	brcs	.-30     	; 0x2438 <__divsf3+0x4>

00002456 <__divsf3_pse>:
    2456:	99 23       	and	r25, r25
    2458:	b9 f3       	breq	.-18     	; 0x2448 <__divsf3+0x14>
    245a:	55 23       	and	r21, r21
    245c:	a1 f3       	breq	.-24     	; 0x2446 <__divsf3+0x12>
    245e:	95 1b       	sub	r25, r21
    2460:	55 0b       	sbc	r21, r21
    2462:	bb 27       	eor	r27, r27
    2464:	aa 27       	eor	r26, r26
    2466:	62 17       	cp	r22, r18
    2468:	73 07       	cpc	r23, r19
    246a:	84 07       	cpc	r24, r20
    246c:	38 f0       	brcs	.+14     	; 0x247c <__divsf3_pse+0x26>
    246e:	9f 5f       	subi	r25, 0xFF	; 255
    2470:	5f 4f       	sbci	r21, 0xFF	; 255
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	44 1f       	adc	r20, r20
    2478:	aa 1f       	adc	r26, r26
    247a:	a9 f3       	breq	.-22     	; 0x2466 <__divsf3_pse+0x10>
    247c:	34 d0       	rcall	.+104    	; 0x24e6 <__divsf3_pse+0x90>
    247e:	0e 2e       	mov	r0, r30
    2480:	3a f0       	brmi	.+14     	; 0x2490 <__divsf3_pse+0x3a>
    2482:	e0 e8       	ldi	r30, 0x80	; 128
    2484:	31 d0       	rcall	.+98     	; 0x24e8 <__divsf3_pse+0x92>
    2486:	91 50       	subi	r25, 0x01	; 1
    2488:	50 40       	sbci	r21, 0x00	; 0
    248a:	e6 95       	lsr	r30
    248c:	00 1c       	adc	r0, r0
    248e:	ca f7       	brpl	.-14     	; 0x2482 <__divsf3_pse+0x2c>
    2490:	2a d0       	rcall	.+84     	; 0x24e6 <__divsf3_pse+0x90>
    2492:	fe 2f       	mov	r31, r30
    2494:	28 d0       	rcall	.+80     	; 0x24e6 <__divsf3_pse+0x90>
    2496:	66 0f       	add	r22, r22
    2498:	77 1f       	adc	r23, r23
    249a:	88 1f       	adc	r24, r24
    249c:	bb 1f       	adc	r27, r27
    249e:	26 17       	cp	r18, r22
    24a0:	37 07       	cpc	r19, r23
    24a2:	48 07       	cpc	r20, r24
    24a4:	ab 07       	cpc	r26, r27
    24a6:	b0 e8       	ldi	r27, 0x80	; 128
    24a8:	09 f0       	breq	.+2      	; 0x24ac <__divsf3_pse+0x56>
    24aa:	bb 0b       	sbc	r27, r27
    24ac:	80 2d       	mov	r24, r0
    24ae:	bf 01       	movw	r22, r30
    24b0:	ff 27       	eor	r31, r31
    24b2:	93 58       	subi	r25, 0x83	; 131
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
    24b6:	32 f0       	brmi	.+12     	; 0x24c4 <__divsf3_pse+0x6e>
    24b8:	9e 3f       	cpi	r25, 0xFE	; 254
    24ba:	51 05       	cpc	r21, r1
    24bc:	70 f0       	brcs	.+28     	; 0x24da <__divsf3_pse+0x84>
    24be:	86 c0       	rjmp	.+268    	; 0x25cc <__fp_inf>
    24c0:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_szero>
    24c4:	5f 3f       	cpi	r21, 0xFF	; 255
    24c6:	e4 f3       	brlt	.-8      	; 0x24c0 <__divsf3_pse+0x6a>
    24c8:	98 3e       	cpi	r25, 0xE8	; 232
    24ca:	d4 f3       	brlt	.-12     	; 0x24c0 <__divsf3_pse+0x6a>
    24cc:	86 95       	lsr	r24
    24ce:	77 95       	ror	r23
    24d0:	67 95       	ror	r22
    24d2:	b7 95       	ror	r27
    24d4:	f7 95       	ror	r31
    24d6:	9f 5f       	subi	r25, 0xFF	; 255
    24d8:	c9 f7       	brne	.-14     	; 0x24cc <__divsf3_pse+0x76>
    24da:	88 0f       	add	r24, r24
    24dc:	91 1d       	adc	r25, r1
    24de:	96 95       	lsr	r25
    24e0:	87 95       	ror	r24
    24e2:	97 f9       	bld	r25, 7
    24e4:	08 95       	ret
    24e6:	e1 e0       	ldi	r30, 0x01	; 1
    24e8:	66 0f       	add	r22, r22
    24ea:	77 1f       	adc	r23, r23
    24ec:	88 1f       	adc	r24, r24
    24ee:	bb 1f       	adc	r27, r27
    24f0:	62 17       	cp	r22, r18
    24f2:	73 07       	cpc	r23, r19
    24f4:	84 07       	cpc	r24, r20
    24f6:	ba 07       	cpc	r27, r26
    24f8:	20 f0       	brcs	.+8      	; 0x2502 <__divsf3_pse+0xac>
    24fa:	62 1b       	sub	r22, r18
    24fc:	73 0b       	sbc	r23, r19
    24fe:	84 0b       	sbc	r24, r20
    2500:	ba 0b       	sbc	r27, r26
    2502:	ee 1f       	adc	r30, r30
    2504:	88 f7       	brcc	.-30     	; 0x24e8 <__divsf3_pse+0x92>
    2506:	e0 95       	com	r30
    2508:	08 95       	ret

0000250a <__floatunsisf>:
    250a:	e8 94       	clt
    250c:	09 c0       	rjmp	.+18     	; 0x2520 <__floatsisf+0x12>

0000250e <__floatsisf>:
    250e:	97 fb       	bst	r25, 7
    2510:	3e f4       	brtc	.+14     	; 0x2520 <__floatsisf+0x12>
    2512:	90 95       	com	r25
    2514:	80 95       	com	r24
    2516:	70 95       	com	r23
    2518:	61 95       	neg	r22
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	8f 4f       	sbci	r24, 0xFF	; 255
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	99 23       	and	r25, r25
    2522:	a9 f0       	breq	.+42     	; 0x254e <__floatsisf+0x40>
    2524:	f9 2f       	mov	r31, r25
    2526:	96 e9       	ldi	r25, 0x96	; 150
    2528:	bb 27       	eor	r27, r27
    252a:	93 95       	inc	r25
    252c:	f6 95       	lsr	r31
    252e:	87 95       	ror	r24
    2530:	77 95       	ror	r23
    2532:	67 95       	ror	r22
    2534:	b7 95       	ror	r27
    2536:	f1 11       	cpse	r31, r1
    2538:	f8 cf       	rjmp	.-16     	; 0x252a <__floatsisf+0x1c>
    253a:	fa f4       	brpl	.+62     	; 0x257a <__floatsisf+0x6c>
    253c:	bb 0f       	add	r27, r27
    253e:	11 f4       	brne	.+4      	; 0x2544 <__floatsisf+0x36>
    2540:	60 ff       	sbrs	r22, 0
    2542:	1b c0       	rjmp	.+54     	; 0x257a <__floatsisf+0x6c>
    2544:	6f 5f       	subi	r22, 0xFF	; 255
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	8f 4f       	sbci	r24, 0xFF	; 255
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	16 c0       	rjmp	.+44     	; 0x257a <__floatsisf+0x6c>
    254e:	88 23       	and	r24, r24
    2550:	11 f0       	breq	.+4      	; 0x2556 <__floatsisf+0x48>
    2552:	96 e9       	ldi	r25, 0x96	; 150
    2554:	11 c0       	rjmp	.+34     	; 0x2578 <__floatsisf+0x6a>
    2556:	77 23       	and	r23, r23
    2558:	21 f0       	breq	.+8      	; 0x2562 <__floatsisf+0x54>
    255a:	9e e8       	ldi	r25, 0x8E	; 142
    255c:	87 2f       	mov	r24, r23
    255e:	76 2f       	mov	r23, r22
    2560:	05 c0       	rjmp	.+10     	; 0x256c <__floatsisf+0x5e>
    2562:	66 23       	and	r22, r22
    2564:	71 f0       	breq	.+28     	; 0x2582 <__floatsisf+0x74>
    2566:	96 e8       	ldi	r25, 0x86	; 134
    2568:	86 2f       	mov	r24, r22
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	2a f0       	brmi	.+10     	; 0x257a <__floatsisf+0x6c>
    2570:	9a 95       	dec	r25
    2572:	66 0f       	add	r22, r22
    2574:	77 1f       	adc	r23, r23
    2576:	88 1f       	adc	r24, r24
    2578:	da f7       	brpl	.-10     	; 0x2570 <__floatsisf+0x62>
    257a:	88 0f       	add	r24, r24
    257c:	96 95       	lsr	r25
    257e:	87 95       	ror	r24
    2580:	97 f9       	bld	r25, 7
    2582:	08 95       	ret

00002584 <__fp_cmp>:
    2584:	99 0f       	add	r25, r25
    2586:	00 08       	sbc	r0, r0
    2588:	55 0f       	add	r21, r21
    258a:	aa 0b       	sbc	r26, r26
    258c:	e0 e8       	ldi	r30, 0x80	; 128
    258e:	fe ef       	ldi	r31, 0xFE	; 254
    2590:	16 16       	cp	r1, r22
    2592:	17 06       	cpc	r1, r23
    2594:	e8 07       	cpc	r30, r24
    2596:	f9 07       	cpc	r31, r25
    2598:	c0 f0       	brcs	.+48     	; 0x25ca <__fp_cmp+0x46>
    259a:	12 16       	cp	r1, r18
    259c:	13 06       	cpc	r1, r19
    259e:	e4 07       	cpc	r30, r20
    25a0:	f5 07       	cpc	r31, r21
    25a2:	98 f0       	brcs	.+38     	; 0x25ca <__fp_cmp+0x46>
    25a4:	62 1b       	sub	r22, r18
    25a6:	73 0b       	sbc	r23, r19
    25a8:	84 0b       	sbc	r24, r20
    25aa:	95 0b       	sbc	r25, r21
    25ac:	39 f4       	brne	.+14     	; 0x25bc <__fp_cmp+0x38>
    25ae:	0a 26       	eor	r0, r26
    25b0:	61 f0       	breq	.+24     	; 0x25ca <__fp_cmp+0x46>
    25b2:	23 2b       	or	r18, r19
    25b4:	24 2b       	or	r18, r20
    25b6:	25 2b       	or	r18, r21
    25b8:	21 f4       	brne	.+8      	; 0x25c2 <__fp_cmp+0x3e>
    25ba:	08 95       	ret
    25bc:	0a 26       	eor	r0, r26
    25be:	09 f4       	brne	.+2      	; 0x25c2 <__fp_cmp+0x3e>
    25c0:	a1 40       	sbci	r26, 0x01	; 1
    25c2:	a6 95       	lsr	r26
    25c4:	8f ef       	ldi	r24, 0xFF	; 255
    25c6:	81 1d       	adc	r24, r1
    25c8:	81 1d       	adc	r24, r1
    25ca:	08 95       	ret

000025cc <__fp_inf>:
    25cc:	97 f9       	bld	r25, 7
    25ce:	9f 67       	ori	r25, 0x7F	; 127
    25d0:	80 e8       	ldi	r24, 0x80	; 128
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	08 95       	ret

000025d8 <__fp_nan>:
    25d8:	9f ef       	ldi	r25, 0xFF	; 255
    25da:	80 ec       	ldi	r24, 0xC0	; 192
    25dc:	08 95       	ret

000025de <__fp_pscA>:
    25de:	00 24       	eor	r0, r0
    25e0:	0a 94       	dec	r0
    25e2:	16 16       	cp	r1, r22
    25e4:	17 06       	cpc	r1, r23
    25e6:	18 06       	cpc	r1, r24
    25e8:	09 06       	cpc	r0, r25
    25ea:	08 95       	ret

000025ec <__fp_pscB>:
    25ec:	00 24       	eor	r0, r0
    25ee:	0a 94       	dec	r0
    25f0:	12 16       	cp	r1, r18
    25f2:	13 06       	cpc	r1, r19
    25f4:	14 06       	cpc	r1, r20
    25f6:	05 06       	cpc	r0, r21
    25f8:	08 95       	ret

000025fa <__fp_round>:
    25fa:	09 2e       	mov	r0, r25
    25fc:	03 94       	inc	r0
    25fe:	00 0c       	add	r0, r0
    2600:	11 f4       	brne	.+4      	; 0x2606 <__fp_round+0xc>
    2602:	88 23       	and	r24, r24
    2604:	52 f0       	brmi	.+20     	; 0x261a <__fp_round+0x20>
    2606:	bb 0f       	add	r27, r27
    2608:	40 f4       	brcc	.+16     	; 0x261a <__fp_round+0x20>
    260a:	bf 2b       	or	r27, r31
    260c:	11 f4       	brne	.+4      	; 0x2612 <__fp_round+0x18>
    260e:	60 ff       	sbrs	r22, 0
    2610:	04 c0       	rjmp	.+8      	; 0x261a <__fp_round+0x20>
    2612:	6f 5f       	subi	r22, 0xFF	; 255
    2614:	7f 4f       	sbci	r23, 0xFF	; 255
    2616:	8f 4f       	sbci	r24, 0xFF	; 255
    2618:	9f 4f       	sbci	r25, 0xFF	; 255
    261a:	08 95       	ret

0000261c <__gesf2>:
    261c:	b3 df       	rcall	.-154    	; 0x2584 <__fp_cmp>
    261e:	08 f4       	brcc	.+2      	; 0x2622 <__gesf2+0x6>
    2620:	8f ef       	ldi	r24, 0xFF	; 255
    2622:	08 95       	ret

00002624 <__mulsf3>:
    2624:	0c d0       	rcall	.+24     	; 0x263e <__mulsf3x>
    2626:	e9 cf       	rjmp	.-46     	; 0x25fa <__fp_round>
    2628:	da df       	rcall	.-76     	; 0x25de <__fp_pscA>
    262a:	28 f0       	brcs	.+10     	; 0x2636 <__mulsf3+0x12>
    262c:	df df       	rcall	.-66     	; 0x25ec <__fp_pscB>
    262e:	18 f0       	brcs	.+6      	; 0x2636 <__mulsf3+0x12>
    2630:	95 23       	and	r25, r21
    2632:	09 f0       	breq	.+2      	; 0x2636 <__mulsf3+0x12>
    2634:	cb cf       	rjmp	.-106    	; 0x25cc <__fp_inf>
    2636:	d0 cf       	rjmp	.-96     	; 0x25d8 <__fp_nan>
    2638:	11 24       	eor	r1, r1
    263a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_szero>

0000263e <__mulsf3x>:
    263e:	0e 94 56 02 	call	0x4ac	; 0x4ac <__fp_split3>
    2642:	90 f3       	brcs	.-28     	; 0x2628 <__mulsf3+0x4>

00002644 <__mulsf3_pse>:
    2644:	95 9f       	mul	r25, r21
    2646:	c1 f3       	breq	.-16     	; 0x2638 <__mulsf3+0x14>
    2648:	95 0f       	add	r25, r21
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	55 1f       	adc	r21, r21
    264e:	62 9f       	mul	r22, r18
    2650:	f0 01       	movw	r30, r0
    2652:	72 9f       	mul	r23, r18
    2654:	bb 27       	eor	r27, r27
    2656:	f0 0d       	add	r31, r0
    2658:	b1 1d       	adc	r27, r1
    265a:	63 9f       	mul	r22, r19
    265c:	aa 27       	eor	r26, r26
    265e:	f0 0d       	add	r31, r0
    2660:	b1 1d       	adc	r27, r1
    2662:	aa 1f       	adc	r26, r26
    2664:	64 9f       	mul	r22, r20
    2666:	66 27       	eor	r22, r22
    2668:	b0 0d       	add	r27, r0
    266a:	a1 1d       	adc	r26, r1
    266c:	66 1f       	adc	r22, r22
    266e:	82 9f       	mul	r24, r18
    2670:	22 27       	eor	r18, r18
    2672:	b0 0d       	add	r27, r0
    2674:	a1 1d       	adc	r26, r1
    2676:	62 1f       	adc	r22, r18
    2678:	73 9f       	mul	r23, r19
    267a:	b0 0d       	add	r27, r0
    267c:	a1 1d       	adc	r26, r1
    267e:	62 1f       	adc	r22, r18
    2680:	83 9f       	mul	r24, r19
    2682:	a0 0d       	add	r26, r0
    2684:	61 1d       	adc	r22, r1
    2686:	22 1f       	adc	r18, r18
    2688:	74 9f       	mul	r23, r20
    268a:	33 27       	eor	r19, r19
    268c:	a0 0d       	add	r26, r0
    268e:	61 1d       	adc	r22, r1
    2690:	23 1f       	adc	r18, r19
    2692:	84 9f       	mul	r24, r20
    2694:	60 0d       	add	r22, r0
    2696:	21 1d       	adc	r18, r1
    2698:	82 2f       	mov	r24, r18
    269a:	76 2f       	mov	r23, r22
    269c:	6a 2f       	mov	r22, r26
    269e:	11 24       	eor	r1, r1
    26a0:	9f 57       	subi	r25, 0x7F	; 127
    26a2:	50 40       	sbci	r21, 0x00	; 0
    26a4:	92 f0       	brmi	.+36     	; 0x26ca <__mulsf3_pse+0x86>
    26a6:	e9 f0       	breq	.+58     	; 0x26e2 <__mulsf3_pse+0x9e>
    26a8:	88 23       	and	r24, r24
    26aa:	4a f0       	brmi	.+18     	; 0x26be <__mulsf3_pse+0x7a>
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	bb 1f       	adc	r27, r27
    26b2:	66 1f       	adc	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	88 1f       	adc	r24, r24
    26b8:	91 50       	subi	r25, 0x01	; 1
    26ba:	50 40       	sbci	r21, 0x00	; 0
    26bc:	a9 f7       	brne	.-22     	; 0x26a8 <__mulsf3_pse+0x64>
    26be:	9e 3f       	cpi	r25, 0xFE	; 254
    26c0:	51 05       	cpc	r21, r1
    26c2:	78 f0       	brcs	.+30     	; 0x26e2 <__mulsf3_pse+0x9e>
    26c4:	83 cf       	rjmp	.-250    	; 0x25cc <__fp_inf>
    26c6:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_szero>
    26ca:	5f 3f       	cpi	r21, 0xFF	; 255
    26cc:	e4 f3       	brlt	.-8      	; 0x26c6 <__mulsf3_pse+0x82>
    26ce:	98 3e       	cpi	r25, 0xE8	; 232
    26d0:	d4 f3       	brlt	.-12     	; 0x26c6 <__mulsf3_pse+0x82>
    26d2:	86 95       	lsr	r24
    26d4:	77 95       	ror	r23
    26d6:	67 95       	ror	r22
    26d8:	b7 95       	ror	r27
    26da:	f7 95       	ror	r31
    26dc:	e7 95       	ror	r30
    26de:	9f 5f       	subi	r25, 0xFF	; 255
    26e0:	c1 f7       	brne	.-16     	; 0x26d2 <__mulsf3_pse+0x8e>
    26e2:	fe 2b       	or	r31, r30
    26e4:	88 0f       	add	r24, r24
    26e6:	91 1d       	adc	r25, r1
    26e8:	96 95       	lsr	r25
    26ea:	87 95       	ror	r24
    26ec:	97 f9       	bld	r25, 7
    26ee:	08 95       	ret

000026f0 <__unordsf2>:
    26f0:	49 df       	rcall	.-366    	; 0x2584 <__fp_cmp>
    26f2:	88 0b       	sbc	r24, r24
    26f4:	99 0b       	sbc	r25, r25
    26f6:	08 95       	ret

000026f8 <__udivmodsi4>:
    26f8:	a1 e2       	ldi	r26, 0x21	; 33
    26fa:	1a 2e       	mov	r1, r26
    26fc:	aa 1b       	sub	r26, r26
    26fe:	bb 1b       	sub	r27, r27
    2700:	fd 01       	movw	r30, r26
    2702:	0d c0       	rjmp	.+26     	; 0x271e <__udivmodsi4_ep>

00002704 <__udivmodsi4_loop>:
    2704:	aa 1f       	adc	r26, r26
    2706:	bb 1f       	adc	r27, r27
    2708:	ee 1f       	adc	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	a2 17       	cp	r26, r18
    270e:	b3 07       	cpc	r27, r19
    2710:	e4 07       	cpc	r30, r20
    2712:	f5 07       	cpc	r31, r21
    2714:	20 f0       	brcs	.+8      	; 0x271e <__udivmodsi4_ep>
    2716:	a2 1b       	sub	r26, r18
    2718:	b3 0b       	sbc	r27, r19
    271a:	e4 0b       	sbc	r30, r20
    271c:	f5 0b       	sbc	r31, r21

0000271e <__udivmodsi4_ep>:
    271e:	66 1f       	adc	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	88 1f       	adc	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	1a 94       	dec	r1
    2728:	69 f7       	brne	.-38     	; 0x2704 <__udivmodsi4_loop>
    272a:	60 95       	com	r22
    272c:	70 95       	com	r23
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	9b 01       	movw	r18, r22
    2734:	ac 01       	movw	r20, r24
    2736:	bd 01       	movw	r22, r26
    2738:	cf 01       	movw	r24, r30
    273a:	08 95       	ret

0000273c <__tablejump2__>:
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	88 1f       	adc	r24, r24
    2742:	8b bf       	out	0x3b, r24	; 59
    2744:	07 90       	elpm	r0, Z+
    2746:	f6 91       	elpm	r31, Z
    2748:	e0 2d       	mov	r30, r0
    274a:	19 94       	eijmp

0000274c <malloc>:
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	82 30       	cpi	r24, 0x02	; 2
    2756:	91 05       	cpc	r25, r1
    2758:	10 f4       	brcc	.+4      	; 0x275e <malloc+0x12>
    275a:	82 e0       	ldi	r24, 0x02	; 2
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <__flp>
    2762:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <__flp+0x1>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	a0 e0       	ldi	r26, 0x00	; 0
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	30 97       	sbiw	r30, 0x00	; 0
    2770:	19 f1       	breq	.+70     	; 0x27b8 <malloc+0x6c>
    2772:	40 81       	ld	r20, Z
    2774:	51 81       	ldd	r21, Z+1	; 0x01
    2776:	02 81       	ldd	r16, Z+2	; 0x02
    2778:	13 81       	ldd	r17, Z+3	; 0x03
    277a:	48 17       	cp	r20, r24
    277c:	59 07       	cpc	r21, r25
    277e:	c8 f0       	brcs	.+50     	; 0x27b2 <malloc+0x66>
    2780:	84 17       	cp	r24, r20
    2782:	95 07       	cpc	r25, r21
    2784:	69 f4       	brne	.+26     	; 0x27a0 <malloc+0x54>
    2786:	10 97       	sbiw	r26, 0x00	; 0
    2788:	31 f0       	breq	.+12     	; 0x2796 <malloc+0x4a>
    278a:	12 96       	adiw	r26, 0x02	; 2
    278c:	0c 93       	st	X, r16
    278e:	12 97       	sbiw	r26, 0x02	; 2
    2790:	13 96       	adiw	r26, 0x03	; 3
    2792:	1c 93       	st	X, r17
    2794:	27 c0       	rjmp	.+78     	; 0x27e4 <malloc+0x98>
    2796:	00 93 47 04 	sts	0x0447, r16	; 0x800447 <__flp>
    279a:	10 93 48 04 	sts	0x0448, r17	; 0x800448 <__flp+0x1>
    279e:	22 c0       	rjmp	.+68     	; 0x27e4 <malloc+0x98>
    27a0:	21 15       	cp	r18, r1
    27a2:	31 05       	cpc	r19, r1
    27a4:	19 f0       	breq	.+6      	; 0x27ac <malloc+0x60>
    27a6:	42 17       	cp	r20, r18
    27a8:	53 07       	cpc	r21, r19
    27aa:	18 f4       	brcc	.+6      	; 0x27b2 <malloc+0x66>
    27ac:	9a 01       	movw	r18, r20
    27ae:	bd 01       	movw	r22, r26
    27b0:	ef 01       	movw	r28, r30
    27b2:	df 01       	movw	r26, r30
    27b4:	f8 01       	movw	r30, r16
    27b6:	db cf       	rjmp	.-74     	; 0x276e <malloc+0x22>
    27b8:	21 15       	cp	r18, r1
    27ba:	31 05       	cpc	r19, r1
    27bc:	f9 f0       	breq	.+62     	; 0x27fc <malloc+0xb0>
    27be:	28 1b       	sub	r18, r24
    27c0:	39 0b       	sbc	r19, r25
    27c2:	24 30       	cpi	r18, 0x04	; 4
    27c4:	31 05       	cpc	r19, r1
    27c6:	80 f4       	brcc	.+32     	; 0x27e8 <malloc+0x9c>
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	9b 81       	ldd	r25, Y+3	; 0x03
    27cc:	61 15       	cp	r22, r1
    27ce:	71 05       	cpc	r23, r1
    27d0:	21 f0       	breq	.+8      	; 0x27da <malloc+0x8e>
    27d2:	fb 01       	movw	r30, r22
    27d4:	93 83       	std	Z+3, r25	; 0x03
    27d6:	82 83       	std	Z+2, r24	; 0x02
    27d8:	04 c0       	rjmp	.+8      	; 0x27e2 <malloc+0x96>
    27da:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <__flp+0x1>
    27de:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__flp>
    27e2:	fe 01       	movw	r30, r28
    27e4:	32 96       	adiw	r30, 0x02	; 2
    27e6:	44 c0       	rjmp	.+136    	; 0x2870 <malloc+0x124>
    27e8:	fe 01       	movw	r30, r28
    27ea:	e2 0f       	add	r30, r18
    27ec:	f3 1f       	adc	r31, r19
    27ee:	81 93       	st	Z+, r24
    27f0:	91 93       	st	Z+, r25
    27f2:	22 50       	subi	r18, 0x02	; 2
    27f4:	31 09       	sbc	r19, r1
    27f6:	39 83       	std	Y+1, r19	; 0x01
    27f8:	28 83       	st	Y, r18
    27fa:	3a c0       	rjmp	.+116    	; 0x2870 <malloc+0x124>
    27fc:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <__brkval>
    2800:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <__brkval+0x1>
    2804:	23 2b       	or	r18, r19
    2806:	41 f4       	brne	.+16     	; 0x2818 <malloc+0xcc>
    2808:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    280c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2810:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <__brkval+0x1>
    2814:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <__brkval>
    2818:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    281c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2820:	21 15       	cp	r18, r1
    2822:	31 05       	cpc	r19, r1
    2824:	41 f4       	brne	.+16     	; 0x2836 <malloc+0xea>
    2826:	2d b7       	in	r18, 0x3d	; 61
    2828:	3e b7       	in	r19, 0x3e	; 62
    282a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    282e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2832:	24 1b       	sub	r18, r20
    2834:	35 0b       	sbc	r19, r21
    2836:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <__brkval>
    283a:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <__brkval+0x1>
    283e:	e2 17       	cp	r30, r18
    2840:	f3 07       	cpc	r31, r19
    2842:	a0 f4       	brcc	.+40     	; 0x286c <malloc+0x120>
    2844:	2e 1b       	sub	r18, r30
    2846:	3f 0b       	sbc	r19, r31
    2848:	28 17       	cp	r18, r24
    284a:	39 07       	cpc	r19, r25
    284c:	78 f0       	brcs	.+30     	; 0x286c <malloc+0x120>
    284e:	ac 01       	movw	r20, r24
    2850:	4e 5f       	subi	r20, 0xFE	; 254
    2852:	5f 4f       	sbci	r21, 0xFF	; 255
    2854:	24 17       	cp	r18, r20
    2856:	35 07       	cpc	r19, r21
    2858:	48 f0       	brcs	.+18     	; 0x286c <malloc+0x120>
    285a:	4e 0f       	add	r20, r30
    285c:	5f 1f       	adc	r21, r31
    285e:	50 93 46 04 	sts	0x0446, r21	; 0x800446 <__brkval+0x1>
    2862:	40 93 45 04 	sts	0x0445, r20	; 0x800445 <__brkval>
    2866:	81 93       	st	Z+, r24
    2868:	91 93       	st	Z+, r25
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <malloc+0x124>
    286c:	e0 e0       	ldi	r30, 0x00	; 0
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	cf 01       	movw	r24, r30
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret

0000287c <free>:
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	09 f4       	brne	.+2      	; 0x2886 <free+0xa>
    2884:	81 c0       	rjmp	.+258    	; 0x2988 <free+0x10c>
    2886:	fc 01       	movw	r30, r24
    2888:	32 97       	sbiw	r30, 0x02	; 2
    288a:	13 82       	std	Z+3, r1	; 0x03
    288c:	12 82       	std	Z+2, r1	; 0x02
    288e:	a0 91 47 04 	lds	r26, 0x0447	; 0x800447 <__flp>
    2892:	b0 91 48 04 	lds	r27, 0x0448	; 0x800448 <__flp+0x1>
    2896:	10 97       	sbiw	r26, 0x00	; 0
    2898:	81 f4       	brne	.+32     	; 0x28ba <free+0x3e>
    289a:	20 81       	ld	r18, Z
    289c:	31 81       	ldd	r19, Z+1	; 0x01
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <__brkval>
    28a6:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <__brkval+0x1>
    28aa:	28 17       	cp	r18, r24
    28ac:	39 07       	cpc	r19, r25
    28ae:	51 f5       	brne	.+84     	; 0x2904 <free+0x88>
    28b0:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__brkval+0x1>
    28b4:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__brkval>
    28b8:	67 c0       	rjmp	.+206    	; 0x2988 <free+0x10c>
    28ba:	ed 01       	movw	r28, r26
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	ce 17       	cp	r28, r30
    28c2:	df 07       	cpc	r29, r31
    28c4:	40 f4       	brcc	.+16     	; 0x28d6 <free+0x5a>
    28c6:	4a 81       	ldd	r20, Y+2	; 0x02
    28c8:	5b 81       	ldd	r21, Y+3	; 0x03
    28ca:	9e 01       	movw	r18, r28
    28cc:	41 15       	cp	r20, r1
    28ce:	51 05       	cpc	r21, r1
    28d0:	f1 f0       	breq	.+60     	; 0x290e <free+0x92>
    28d2:	ea 01       	movw	r28, r20
    28d4:	f5 cf       	rjmp	.-22     	; 0x28c0 <free+0x44>
    28d6:	d3 83       	std	Z+3, r29	; 0x03
    28d8:	c2 83       	std	Z+2, r28	; 0x02
    28da:	40 81       	ld	r20, Z
    28dc:	51 81       	ldd	r21, Z+1	; 0x01
    28de:	84 0f       	add	r24, r20
    28e0:	95 1f       	adc	r25, r21
    28e2:	c8 17       	cp	r28, r24
    28e4:	d9 07       	cpc	r29, r25
    28e6:	59 f4       	brne	.+22     	; 0x28fe <free+0x82>
    28e8:	88 81       	ld	r24, Y
    28ea:	99 81       	ldd	r25, Y+1	; 0x01
    28ec:	84 0f       	add	r24, r20
    28ee:	95 1f       	adc	r25, r21
    28f0:	02 96       	adiw	r24, 0x02	; 2
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	93 83       	std	Z+3, r25	; 0x03
    28fc:	82 83       	std	Z+2, r24	; 0x02
    28fe:	21 15       	cp	r18, r1
    2900:	31 05       	cpc	r19, r1
    2902:	29 f4       	brne	.+10     	; 0x290e <free+0x92>
    2904:	f0 93 48 04 	sts	0x0448, r31	; 0x800448 <__flp+0x1>
    2908:	e0 93 47 04 	sts	0x0447, r30	; 0x800447 <__flp>
    290c:	3d c0       	rjmp	.+122    	; 0x2988 <free+0x10c>
    290e:	e9 01       	movw	r28, r18
    2910:	fb 83       	std	Y+3, r31	; 0x03
    2912:	ea 83       	std	Y+2, r30	; 0x02
    2914:	49 91       	ld	r20, Y+
    2916:	59 91       	ld	r21, Y+
    2918:	c4 0f       	add	r28, r20
    291a:	d5 1f       	adc	r29, r21
    291c:	ec 17       	cp	r30, r28
    291e:	fd 07       	cpc	r31, r29
    2920:	61 f4       	brne	.+24     	; 0x293a <free+0xbe>
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	84 0f       	add	r24, r20
    2928:	95 1f       	adc	r25, r21
    292a:	02 96       	adiw	r24, 0x02	; 2
    292c:	e9 01       	movw	r28, r18
    292e:	99 83       	std	Y+1, r25	; 0x01
    2930:	88 83       	st	Y, r24
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	9b 83       	std	Y+3, r25	; 0x03
    2938:	8a 83       	std	Y+2, r24	; 0x02
    293a:	e0 e0       	ldi	r30, 0x00	; 0
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	12 96       	adiw	r26, 0x02	; 2
    2940:	8d 91       	ld	r24, X+
    2942:	9c 91       	ld	r25, X
    2944:	13 97       	sbiw	r26, 0x03	; 3
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	19 f0       	breq	.+6      	; 0x2950 <free+0xd4>
    294a:	fd 01       	movw	r30, r26
    294c:	dc 01       	movw	r26, r24
    294e:	f7 cf       	rjmp	.-18     	; 0x293e <free+0xc2>
    2950:	8d 91       	ld	r24, X+
    2952:	9c 91       	ld	r25, X
    2954:	11 97       	sbiw	r26, 0x01	; 1
    2956:	9d 01       	movw	r18, r26
    2958:	2e 5f       	subi	r18, 0xFE	; 254
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	82 0f       	add	r24, r18
    295e:	93 1f       	adc	r25, r19
    2960:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <__brkval>
    2964:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <__brkval+0x1>
    2968:	28 17       	cp	r18, r24
    296a:	39 07       	cpc	r19, r25
    296c:	69 f4       	brne	.+26     	; 0x2988 <free+0x10c>
    296e:	30 97       	sbiw	r30, 0x00	; 0
    2970:	29 f4       	brne	.+10     	; 0x297c <free+0x100>
    2972:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <__flp+0x1>
    2976:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <__flp>
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <free+0x104>
    297c:	13 82       	std	Z+3, r1	; 0x03
    297e:	12 82       	std	Z+2, r1	; 0x02
    2980:	b0 93 46 04 	sts	0x0446, r27	; 0x800446 <__brkval+0x1>
    2984:	a0 93 45 04 	sts	0x0445, r26	; 0x800445 <__brkval>
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	08 95       	ret

0000298e <strncpy>:
    298e:	fb 01       	movw	r30, r22
    2990:	dc 01       	movw	r26, r24
    2992:	41 50       	subi	r20, 0x01	; 1
    2994:	50 40       	sbci	r21, 0x00	; 0
    2996:	48 f0       	brcs	.+18     	; 0x29aa <strncpy+0x1c>
    2998:	01 90       	ld	r0, Z+
    299a:	0d 92       	st	X+, r0
    299c:	00 20       	and	r0, r0
    299e:	c9 f7       	brne	.-14     	; 0x2992 <strncpy+0x4>
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <strncpy+0x16>
    29a2:	1d 92       	st	X+, r1
    29a4:	41 50       	subi	r20, 0x01	; 1
    29a6:	50 40       	sbci	r21, 0x00	; 0
    29a8:	e0 f7       	brcc	.-8      	; 0x29a2 <strncpy+0x14>
    29aa:	08 95       	ret

000029ac <_exit>:
    29ac:	f8 94       	cli

000029ae <__stop_program>:
    29ae:	ff cf       	rjmp	.-2      	; 0x29ae <__stop_program>
